/**
 * @license
 * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
"use strict";
const astValue = require("../javascript/ast-value");
const analyze_properties_1 = require("./analyze-properties");
const warning_1 = require("../warning/warning");
/**
 * Returns an object containing functions that will annotate `declaration` with
 * the polymer-specific meaning of the value nodes for the named properties.
 */
function declarationPropertyHandlers(declaration, document) {
    return {
        is(node) {
            if (node.type === 'Literal') {
                declaration.tagName = '' + node.value;
            }
        },
        properties(node) {
            for (const prop of analyze_properties_1.analyzeProperties(node, document)) {
                declaration.addProperty(prop);
            }
        },
        behaviors(node) {
            if (node.type !== 'ArrayExpression') {
                return;
            }
            for (const element of node.elements) {
                let behaviorName = astValue.getIdentifierName(element);
                if (behaviorName === undefined) {
                    behaviorName = astValue.CANT_CONVERT;
                }
                declaration.behaviorAssignments.push({
                    name: behaviorName,
                    sourceRange: document.sourceRangeForNode(element),
                });
            }
        },
        observers(node) {
            if (node.type !== 'ArrayExpression') {
                return;
            }
            for (let element of node.elements) {
                let v = astValue.expressionToValue(element);
                if (v === undefined) {
                    v = astValue.CANT_CONVERT;
                }
                declaration.observers.push({ javascriptNode: element, expression: v });
            }
        },
        listeners(node) {
            if (node.type !== 'ObjectExpression') {
                declaration.warnings.push({
                    code: 'invalid-listeners-declaration',
                    message: '`listeners` property should be an object expression',
                    severity: warning_1.Severity.ERROR,
                    sourceRange: document.sourceRangeForNode(node)
                });
                return;
            }
            for (let p of node.properties) {
                const evtName = p.key.type === 'Literal' && p.key.value ||
                    p.key.type === 'Identifier' && p.key.name;
                const handler = p.value.type !== 'Literal' || p.value.value;
                if (typeof evtName !== 'string' || typeof handler !== 'string') {
                    // TODO (maklesoft): Notifiy the user somehow that a listener entry was not extracted
                    // because the event or handler namecould not be statically analyzed. E.g. add a low-severity
                    // warning once opting out of rules is supported.
                    continue;
                }
                declaration.listeners.push({ event: evtName, handler: handler });
            }
        }
    };
}
exports.declarationPropertyHandlers = declarationPropertyHandlers;

//# sourceMappingURL=declaration-property-handlers.js.map
