{"version":3,"sources":["test/html/html-element-reference-scanner_test.ts"],"names":[],"mappings":"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","file":"html-element-reference-scanner_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\n\nimport {Analyzer} from '../../analyzer';\nimport {HtmlVisitor} from '../../html/html-document';\nimport {HtmlCustomElementReferenceScanner, HtmlElementReferenceScanner} from '../../html/html-element-reference-scanner';\nimport {HtmlParser} from '../../html/html-parser';\nimport {SourceRange} from '../../model/model';\nimport {WarningPrinter} from '../../warning/warning-printer';\n\nsuite('HtmlElementReferenceScanner', () => {\n\n  suite('scan()', () => {\n    let scanner: HtmlElementReferenceScanner;\n\n    setup(() => {\n      scanner = new HtmlElementReferenceScanner();\n    });\n\n    test('finds element references', async() => {\n      const contents = `<html><head></head>\n      <body>\n        <div>Foo</div>\n        <x-foo></x-foo>\n        <div>\n          <x-bar></x-bar>\n        </div>\n      </body></html>`;\n\n      const document = new HtmlParser().parse(contents, 'test-document.html');\n      let visit = async(visitor: HtmlVisitor) => document.visit([visitor]);\n\n      const features = await scanner.scan(document, visit);\n\n      assert.deepEqual(\n          features.map(f => f.tagName),\n          ['html', 'head', 'body', 'div', 'x-foo', 'div', 'x-bar']);\n    });\n  });\n});\n\nsuite('HtmlCustomElementReferenceScanner', () => {\n\n  suite('scan()', () => {\n    let scanner: HtmlCustomElementReferenceScanner;\n    let contents = '';\n    const loader = {canLoad: () => true, load: () => Promise.resolve(contents)};\n    const warningPrinter = new WarningPrinter(\n        null as any, {analyzer: new Analyzer({urlLoader: loader})});\n\n    async function getUnderlinedText(sourceRange: SourceRange|undefined) {\n      if (!sourceRange) {\n        return 'No source range produced';\n      }\n      return '\\n' + await warningPrinter.getUnderlinedText(sourceRange);\n    }\n\n    setup(() => {\n      scanner = new HtmlCustomElementReferenceScanner();\n    });\n\n    test('finds custom element references', async() => {\n      contents = `<html><body>\n          <div>Foo</div>\n          <x-foo a=5 b=\"test\" c></x-foo>\n          <div>\n            <x-bar></x-bar>\n          </div>\n          <h1>Bar</h1>\n        </body></html>`;\n\n      const document = new HtmlParser().parse(contents, 'test-document.html');\n      let visit = async(visitor: HtmlVisitor) => document.visit([visitor]);\n\n      const features = await scanner.scan(document, visit);\n\n      assert.deepEqual(features.map(f => f.tagName), ['x-foo', 'x-bar']);\n\n      assert.deepEqual(\n          features[0].attributes.map(a => [a.name, a.value]),\n          [['a', '5'], ['b', 'test'], ['c', '']]);\n\n      const sourceRanges = await Promise.all(\n          features.map(async f => await getUnderlinedText(f.sourceRange)));\n\n      assert.deepEqual(sourceRanges, [\n        `\n          <x-foo a=5 b=\"test\" c></x-foo>\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`,\n        `\n            <x-bar></x-bar>\n            ~~~~~~~~~~~~~~~`\n      ]);\n\n      const attrRanges = await Promise.all(features.map(\n          async f => await Promise.all(f.attributes.map(\n              async a => await getUnderlinedText(a.sourceRange)))));\n\n      assert.deepEqual(attrRanges, [\n        [\n          `\n          <x-foo a=5 b=\"test\" c></x-foo>\n                 ~~~`,\n          `\n          <x-foo a=5 b=\"test\" c></x-foo>\n                     ~~~~~~~~`,\n          `\n          <x-foo a=5 b=\"test\" c></x-foo>\n                              ~`\n        ],\n        []\n      ]);\n\n      const attrNameRanges = await Promise.all(features.map(\n          async f => await Promise.all(f.attributes.map(\n              async a => await getUnderlinedText(a.nameSourceRange)))));\n\n      assert.deepEqual(attrNameRanges, [\n        [\n          `\n          <x-foo a=5 b=\"test\" c></x-foo>\n                 ~`,\n          `\n          <x-foo a=5 b=\"test\" c></x-foo>\n                     ~`,\n          `\n          <x-foo a=5 b=\"test\" c></x-foo>\n                              ~`\n        ],\n        []\n      ]);\n\n      const attrValueRanges = await Promise.all(features.map(\n          async f => await Promise.all(f.attributes.map(\n              async a => await getUnderlinedText(a.valueSourceRange)))));\n\n      assert.deepEqual(attrValueRanges, [\n        [\n          `\n          <x-foo a=5 b=\"test\" c></x-foo>\n                   ~`,\n          `\n          <x-foo a=5 b=\"test\" c></x-foo>\n                       ~~~~~~`,\n          `No source range produced`\n        ],\n        []\n      ]);\n    });\n\n  });\n\n});\n"]}