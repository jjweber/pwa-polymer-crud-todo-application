{"version":3,"sources":["model/import.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;;AAUH;;;;;GAKG;AACH;IAoBE,YACI,IAAY,EAAE,GAAW,EAAE,WAAkC,EAC7D,cAAqC,EAAE,GAAa;QAJxD,aAAQ,GAAc,EAAE,CAAC;QAKvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;IACrB,CAAC;IAED,OAAO,CAAC,QAAkB;QACxB,MAAM,gBAAgB,GAAG,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAClE,MAAM,CAAC,gBAAgB,IAAI,IAAI,MAAM,CACN,IAAI,CAAC,GAAG,EACR,IAAI,CAAC,IAAI,EACT,gBAAgB,EAChB,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,QAAQ,CAAC,CAAC;IAChD,CAAC;CACF;AAzCD,sCAyCC;AAED;IAWE,YACI,GAAW,EAAE,IAAY,EAAE,QAAkB,EAC7C,WAAkC,EAAE,cAAqC,EACzE,GAAQ,EAAE,QAAmB;QAVjC,gBAAW,GAAG,IAAI,GAAG,EAAE,CAAC;QACxB,UAAK,GAAG,IAAI,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QAU1B,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED,QAAQ;QACN,MAAM,CAAC,iBAAiB,IAAI,CAAC,IAAI,UAAU,IAAI,CAAC,GAAG,IAAI,CAAC;IAC1D,CAAC;CACF;AA5BD,wBA4BC","file":"import.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Warning} from '../warning/warning';\n\nimport {Document} from './document';\nimport {Feature} from './feature';\nimport {SourceRange} from './model';\nimport {Resolvable} from './resolvable';\n\n\n/**\n * Represents an import, such as an HTML import, an external script or style\n * tag, or an JavaScript import.\n *\n * @template N The AST node type\n */\nexport class ScannedImport implements Resolvable {\n  type: 'html-import'|'html-script'|'html-style'|'js-import'|string;\n\n  /**\n   * URL of the import, relative to the base directory.\n   */\n  url: string;\n\n  sourceRange: SourceRange|undefined;\n\n  /**\n   * The source range specifically for the URL or reference to the imported\n   * resource.\n   */\n  urlSourceRange: SourceRange|undefined;\n\n  astNode: any|null;\n\n  warnings: Warning[] = [];\n\n  constructor(\n      type: string, url: string, sourceRange: SourceRange|undefined,\n      urlSourceRange: SourceRange|undefined, ast: any|null) {\n    this.type = type;\n    this.url = url;\n    this.sourceRange = sourceRange;\n    this.urlSourceRange = urlSourceRange;\n    this.astNode = ast;\n  }\n\n  resolve(document: Document): Import|undefined {\n    const importedDocument = document.analyzer._getDocument(this.url);\n    return importedDocument && new Import(\n                                   this.url,\n                                   this.type,\n                                   importedDocument,\n                                   this.sourceRange,\n                                   this.urlSourceRange,\n                                   this.astNode,\n                                   this.warnings);\n  }\n}\n\nexport class Import implements Feature {\n  type: 'html-import'|'html-script'|'html-style'|string;\n  url: string;\n  document: Document;\n  identifiers = new Set();\n  kinds = new Set(['import']);\n  sourceRange: SourceRange|undefined;\n  urlSourceRange: SourceRange|undefined;\n  astNode: any|null;\n  warnings: Warning[];\n\n  constructor(\n      url: string, type: string, document: Document,\n      sourceRange: SourceRange|undefined, urlSourceRange: SourceRange|undefined,\n      ast: any, warnings: Warning[]) {\n    this.url = url;\n    this.type = type;\n    this.document = document;\n    this.kinds.add(this.type);\n    this.sourceRange = sourceRange;\n    this.urlSourceRange = urlSourceRange;\n    this.astNode = ast;\n    this.warnings = warnings;\n  }\n\n  toString() {\n    return `<Import type=\"${this.type}\" url=\"${this.url}\">`;\n  }\n}\n"]}