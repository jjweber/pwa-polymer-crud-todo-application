{"version":3,"sources":["perf/telemetry.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAEH,uCAAuC;AAkBvC;IAAA;QACU,kBAAa,GAAkB,EAAE,CAAC;QAClC,cAAS,GAAmB,EAAE,CAAC;IAsCzC,CAAC;IApCO,eAAe;;YACnB,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAClC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;QAC5B,CAAC;KAAA;IAED;;;;;;OAMG;IACG,KAAK,CAAC,OAAqB,EAAE,IAAY,EAAE,UAAkB;;YACjE,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;YACrD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC7B,CAAC;KAAA;IAEa,MAAM,CAChB,OAAqB,EAAE,IAAY,EAAE,UAAkB;;YACzD,MAAM,KAAK,GAAG,GAAG,EAAE,CAAC;YACpB,IAAI,CAAC;gBACH,MAAM,OAAO,CAAC;YAChB,CAAE;YAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACb,CAAC;YACD,MAAM,OAAO,GAAG,GAAG,EAAE,GAAG,KAAK,CAAC;YAC9B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAC,WAAW,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,EAAC,CAAC,CAAC;QACpE,CAAC;KAAA;IAED,KAAK,CAAC,IAAY,EAAE,UAAkB;QACpC,IAAI,OAAO,GAAe,MAAM,SAAS,CAAC;QAC1C,MAAM,OAAO,GAAG,IAAI,OAAO,CAAO,CAAC,CAAC;YAClC,OAAO,GAAG,CAAC,CAAC;QACd,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;QACtC,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;CACF;AAxCD,4CAwCC","file":"telemetry.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as now from 'performance-now';\n\nexport interface Measurement {\n  /** The time that the measured operation took, in milliseconds. */\n  elapsedTime: number;\n  /**\n   * A descriptive category for the measured operation, e.g. 'parse' or\n   * 'resolve'.\n   */\n  kind: string;\n  /**\n   * A helpful identifier for the item that the measured operation was working\n   * on. e.g. a url or file path like\n   * './bower_components/paper-button/paper-button.html'\n   */\n  identifier: string;\n}\n\nexport class TelemetryTracker {\n  private _measurements: Measurement[] = [];\n  private _promises: Promise<any>[] = [];\n\n  async getMeasurements(): Promise<Measurement[]> {\n    await Promise.all(this._promises);\n    return this._measurements;\n  }\n\n  /**\n   * Less useful than it seems, because the time between promise creation and\n   * the promise settling isn't just work related to the promise. e.g. if you\n   * begin loading a remote file, but then get stuck parsing hydrolysis.js then\n   * you're going to be charged both for the loading and the parsing time,\n   * because the parsing doesn't get interrupted when the loading completes.\n   */\n  async track(promise: Promise<any>, kind: string, identifier: string) {\n    const track = this._track(promise, kind, identifier);\n    this._promises.push(track);\n  }\n\n  private async _track(\n      promise: Promise<any>, kind: string, identifier: string) {\n    const start = now();\n    try {\n      await promise;\n    } catch (_) { /* don't care */\n    }\n    const elapsed = now() - start;\n    this._measurements.push({elapsedTime: elapsed, kind, identifier});\n  }\n\n  start(kind: string, identifier: string): () => void {\n    let resolve: () => void = () => undefined;\n    const promise = new Promise<void>((r) => {\n      resolve = r;\n    });\n    this.track(promise, kind, identifier);\n    return resolve;\n  }\n}\n"]}