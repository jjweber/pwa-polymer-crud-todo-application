{"version":3,"sources":["vanilla-custom-elements/element-scanner.ts"],"names":[],"mappings":"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","file":"element-scanner.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as estree from 'estree';\n\nimport * as astValue from '../javascript/ast-value';\nimport {Visitor} from '../javascript/estree-visitor';\nimport * as esutil from '../javascript/esutil';\nimport {JavaScriptDocument} from '../javascript/javascript-document';\nimport {JavaScriptScanner} from '../javascript/javascript-scanner';\nimport * as jsdoc from '../javascript/jsdoc';\nimport {ScannedElement, ScannedFeature} from '../model/model';\n\nexport interface ScannedAttribute extends ScannedFeature {\n  name: string;\n  type?: string;\n  astNode: estree.Node|null;\n}\n\nexport class ElementScanner implements JavaScriptScanner {\n  async scan(\n      document: JavaScriptDocument,\n      visit: (visitor: Visitor) => Promise<void>): Promise<ScannedElement[]> {\n    let visitor = new ElementVisitor(document);\n    await visit(visitor);\n    return visitor.getRegisteredElements();\n  }\n}\n\nclass ElementVisitor implements Visitor {\n  private _possibleElements = new Map<string, ScannedElement>();\n  private _registeredButNotFound = new Map<string, string>();\n  private _elements: ScannedElement[] = [];\n  private _document: JavaScriptDocument;\n\n  constructor(document: JavaScriptDocument) {\n    this._document = document;\n  }\n\n  enterClassExpression(node: estree.ClassExpression, parent: estree.Node) {\n    if (parent.type !== 'AssignmentExpression' &&\n        parent.type !== 'VariableDeclarator') {\n      return;\n    }\n    let className = astValue.getIdentifierName(\n        parent.type === 'AssignmentExpression' ? parent.left : parent.id);\n    if (className == null) {\n      return;\n    }\n    const element = this._handleClass(node);\n    if (element) {\n      element.className = className;\n      this._possibleElements.set(element.className, element);\n    }\n  }\n\n  enterClassDeclaration(node: estree.ClassDeclaration) {\n    const element = this._handleClass(node);\n    if (element) {\n      element.className = node.id.name;\n      this._possibleElements.set(element.className, element);\n    }\n  }\n\n  private _handleClass(node: estree.ClassDeclaration|estree.ClassExpression) {\n    const element = new ScannedElement();\n    const parsedJsdoc = jsdoc.parseJsdoc(esutil.getAttachedComment(node) || '');\n\n    element.description =\n        (parsedJsdoc.description && parsedJsdoc.description.trim() || '');\n    element.events = esutil.getEventComments(node);\n    element.sourceRange = this._document.sourceRangeForNode(node);\n    if (node.superClass && node.superClass.type === 'Identifier') {\n      element.superClass = node.superClass.name;\n    }\n    const observedAttributesDefn: estree.MethodDefinition|undefined =\n        node.body.body.find(m => {\n          if (m.type !== 'MethodDefinition' || !m.static) {\n            return false;\n          }\n          return astValue.getIdentifierName(m.key) === 'observedAttributes';\n        });\n    if (observedAttributesDefn) {\n      const body = observedAttributesDefn.value.body.body[0];\n      if (body && body.type === 'ReturnStatement' && body.argument &&\n          body.argument.type === 'ArrayExpression') {\n        element.attributes =\n            this._extractAttributesFromObservedAttributes(body.argument);\n      }\n    }\n    return element;\n  }\n\n  enterCallExpression(node: estree.CallExpression) {\n    const callee = astValue.getIdentifierName(node.callee);\n    if (!(callee === 'window.customElements.define' ||\n          callee === 'customElements.define')) {\n      return;\n    }\n    const tagName =\n        node.arguments[0] && astValue.expressionToValue(node.arguments[0]);\n    if (tagName == null || (typeof tagName !== 'string')) {\n      return;\n    }\n    const elementDefn = node.arguments[1];\n    if (elementDefn == null) {\n      return;\n    }\n    const element: ScannedElement|null = this._getElement(tagName, elementDefn);\n    if (!element) {\n      return;\n    }\n    element.tagName = tagName;\n    this._elements.push(element);\n  }\n\n  private _getElement(tagName: string, elementDefn: estree.Node): ScannedElement\n      |null {\n    const className = astValue.getIdentifierName(elementDefn);\n    if (className) {\n      const element = this._possibleElements.get(className);\n      if (element) {\n        this._possibleElements.delete(className);\n        return element;\n      } else {\n        this._registeredButNotFound.set(className, tagName);\n        return null;\n      }\n    }\n    if (elementDefn.type === 'ClassExpression') {\n      return this._handleClass(elementDefn);\n    }\n    return null;\n  }\n\n  /**\n   * Extract attributes from the array expression inside a static\n   * observedAttributes method.\n   *\n   * e.g.\n   *     static get observedAttributes() {\n   *       return [\n   *         /** @type {boolean} When given the element is totally inactive \\*\\/\n   *         'disabled',\n   *         /** @type {boolean} When given the element is expanded \\*\\/\n   *         'open'\n   *       ];\n   *     }\n   */\n  private _extractAttributesFromObservedAttributes(arry:\n                                                       estree.ArrayExpression) {\n    const results: ScannedAttribute[] = [];\n    for (const expr of arry.elements) {\n      const value = astValue.expressionToValue(expr);\n      if (value && typeof value === 'string') {\n        let description = '';\n        let type: string|null = null;\n        const comment = esutil.getAttachedComment(expr);\n        if (comment) {\n          const annotation = jsdoc.parseJsdoc(comment);\n          description = annotation.description || description;\n          const tags = annotation.tags || [];\n          for (const tag of tags) {\n            if (tag.tag === 'type') {\n              type = type || tag.type;\n            }\n            description = description || tag.description || '';\n          }\n        }\n        const attribute: ScannedAttribute = {\n          name: value,\n          description: description,\n          sourceRange: this._document.sourceRangeForNode(expr),\n          astNode: expr,\n          warnings: [],\n        };\n        if (type) {\n          attribute.type = type;\n        }\n        results.push(attribute);\n      }\n    }\n    return results;\n  }\n\n  /**\n   * Gets all found elements. Can only be called once.\n   */\n  getRegisteredElements(): ScannedElement[] {\n    const results = this._elements;\n    for (const classAndTag of this._registeredButNotFound.entries()) {\n      const className = classAndTag[0];\n      const tagName = classAndTag[1];\n      const element = this._possibleElements.get(className);\n      if (element) {\n        element.className = className;\n        element.tagName = tagName;\n        results.push(element);\n      }\n    }\n    return results;\n  }\n}\n"]}