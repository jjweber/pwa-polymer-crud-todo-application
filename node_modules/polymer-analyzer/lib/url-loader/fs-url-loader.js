/**
 * @license
 * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
"use strict";
const fs = require("fs");
const pathlib = require("path");
const url_1 = require("url");
/**
 * Resolves requests via the file system.
 */
class FSUrlLoader {
    constructor(root) {
        this.root = root;
    }
    canLoad(url) {
        let urlObject = url_1.parse(url);
        let pathname = pathlib.normalize(decodeURIComponent(urlObject.pathname || ''));
        return this._isValid(urlObject, pathname);
    }
    _isValid(urlObject, pathname) {
        return (urlObject.protocol === 'file' || !urlObject.hostname) &&
            !pathname.startsWith('../');
    }
    load(url) {
        return new Promise((resolve, reject) => {
            let filepath = this.getFilePath(url);
            fs.readFile(filepath, 'utf8', (error, contents) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(contents);
                }
            });
        });
    }
    getFilePath(url) {
        let urlObject = url_1.parse(url);
        let pathname = pathlib.normalize(decodeURIComponent(urlObject.pathname || ''));
        if (!this._isValid(urlObject, pathname)) {
            throw new Error(`Invalid URL ${url}`);
        }
        return this.root ? pathlib.join(this.root, pathname) : pathname;
    }
}
exports.FSUrlLoader = FSUrlLoader;
;

//# sourceMappingURL=fs-url-loader.js.map
