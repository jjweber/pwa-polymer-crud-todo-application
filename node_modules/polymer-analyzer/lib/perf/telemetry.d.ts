export interface Measurement {
    /** The time that the measured operation took, in milliseconds. */
    elapsedTime: number;
    /**
     * A descriptive category for the measured operation, e.g. 'parse' or
     * 'resolve'.
     */
    kind: string;
    /**
     * A helpful identifier for the item that the measured operation was working
     * on. e.g. a url or file path like
     * './bower_components/paper-button/paper-button.html'
     */
    identifier: string;
}
export declare class TelemetryTracker {
    private _measurements;
    private _promises;
    getMeasurements(): Promise<Measurement[]>;
    /**
     * Less useful than it seems, because the time between promise creation and
     * the promise settling isn't just work related to the promise. e.g. if you
     * begin loading a remote file, but then get stuck parsing hydrolysis.js then
     * you're going to be charged both for the loading and the parsing time,
     * because the parsing doesn't get interrupted when the loading completes.
     */
    track(promise: Promise<any>, kind: string, identifier: string): Promise<void>;
    private _track(promise, kind, identifier);
    start(kind: string, identifier: string): () => void;
}
