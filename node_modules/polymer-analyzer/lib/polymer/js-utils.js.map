{"version":3,"sources":["polymer/js-utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;;AAEH,uCAAuC;AAGvC,iDAAwF;AACxF,6CAA6C;AAE7C,gDAAqD;AAKrD;;GAEG;AACH,kCACI,IAAqB,EAAE,WAAwB;IACjD,IAAI,IAAI,GAAG,oBAAW,CAAC,IAAI,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;IAChD,EAAE,CAAC,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC;QACxB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,KAAK,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC;YAC/C,IAAI,GAAG,EAAE,CAAC;YACV,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC;QACjC,CAAC;IACH,CAAC;IACD,IAAI,WAAW,GACX,KAAK,CAAC,sBAAsB,CAAC,2BAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;IAExE,MAAM,IAAI,GAAG,0BAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAEzC,MAAM,QAAQ,GAAc,EAAE,CAAC;IAC/B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACV,QAAQ,CAAC,IAAI,CAAC;YACZ,IAAI,EAAE,mBAAmB;YACzB,OAAO,EACH,iEAAiE,IAAI;iBAChE,GAAG,CAAC,IAAI,EAAE;YACnB,WAAW,EAAE,WAAW;YACxB,QAAQ,EAAE,kBAAQ,CAAC,OAAO;SAC3B,CAAC,CAAC;IACL,CAAC;IAED,MAAM,MAAM,GAA2B;QACrC,IAAI,EAAE,IAAI,IAAI,EAAE;QAChB,IAAI,EAAE,IAAI;QACV,WAAW,EAAE,WAAW;QACxB,WAAW,EAAE,WAAW;QACxB,OAAO,EAAE,IAAI,EAAE,QAAQ;KACxB,CAAC;IAEF,EAAE,CAAC,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC;QACxB,MAAM,KAAK,GAAoB,IAAI,CAAC,KAAK,CAAC;QACnB,MAAO,CAAC,MAAM;YACjC,CAAC,KAAK,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK;gBAC7B,kEAAkE;gBAClE,2BAA2B;gBAC3B,MAAM,CAAC,EAAC,IAAI,EAAE,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAC,CAAC;YAC3C,CAAC,CAAC,CAAC;IACT,CAAC;IAED,MAAM,CAAC,MAAM,CAAC;AAChB,CAAC;AA7CD,4DA6CC","file":"js-utils.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as escodegen from 'escodegen';\nimport * as estree from 'estree';\n\nimport {closureType, getAttachedComment, objectKeyToString} from '../javascript/esutil';\nimport * as jsdoc from '../javascript/jsdoc';\nimport {SourceRange} from '../model/model';\nimport {Severity, Warning} from '../warning/warning';\n\nimport {ScannedFunction, ScannedPolymerProperty} from './polymer-element';\n\n\n/**\n * Converts a estree Property AST node into its Hydrolysis representation.\n */\nexport function toScannedPolymerProperty(\n    node: estree.Property, sourceRange: SourceRange): ScannedPolymerProperty {\n  let type = closureType(node.value, sourceRange);\n  if (type === 'Function') {\n    if (node.kind === 'get' || node.kind === 'set') {\n      type = '';\n      node[`${node.kind}ter`] = true;\n    }\n  }\n  let description =\n      jsdoc.removeLeadingAsterisks(getAttachedComment(node) || '').trim();\n\n  const name = objectKeyToString(node.key);\n\n  const warnings: Warning[] = [];\n  if (!name) {\n    warnings.push({\n      code: 'unknown-prop-name',\n      message:\n          `Could not determine name of property from expression of type: ${node\n              .key.type}`,\n      sourceRange: sourceRange,\n      severity: Severity.WARNING\n    });\n  }\n\n  const result: ScannedPolymerProperty = {\n    name: name || '',\n    type: type,\n    description: description,\n    sourceRange: sourceRange,\n    astNode: node, warnings\n  };\n\n  if (type === 'Function') {\n    const value = <estree.Function>node.value;\n    (<ScannedFunction><any>result).params =\n        (value.params || []).map((param) => {\n          // With ES6 we can have a lot of param patterns. Best to leave the\n          // formatting to escodegen.\n          return {name: escodegen.generate(param)};\n        });\n  }\n\n  return result;\n}\n"]}