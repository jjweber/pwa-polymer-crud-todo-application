{"version":3,"sources":["core/analyzer-cache-context.ts"],"names":[],"mappings":"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","file":"analyzer-cache-context.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as path from 'path';\n\nimport {LazyEdgeMap, NoKnownParserError, Options, ScannerTable} from '../analyzer';\nimport {CssParser} from '../css/css-parser';\nimport {HtmlCustomElementReferenceScanner} from '../html/html-element-reference-scanner';\nimport {HtmlImportScanner} from '../html/html-import-scanner';\nimport {HtmlParser} from '../html/html-parser';\nimport {HtmlScriptScanner} from '../html/html-script-scanner';\nimport {HtmlStyleScanner} from '../html/html-style-scanner';\nimport {JavaScriptParser} from '../javascript/javascript-parser';\nimport {JsonParser} from '../json/json-parser';\nimport {Document, InlineDocInfo, LocationOffset, ScannedDocument, ScannedElement, ScannedFeature, ScannedImport, ScannedInlineDocument} from '../model/model';\nimport {ParsedDocument} from '../parser/document';\nimport {Parser} from '../parser/parser';\nimport {Measurement, TelemetryTracker} from '../perf/telemetry';\nimport {BehaviorScanner} from '../polymer/behavior-scanner';\nimport {CssImportScanner} from '../polymer/css-import-scanner';\nimport {DomModuleScanner} from '../polymer/dom-module-scanner';\nimport {PolymerElementScanner} from '../polymer/polymer-element-scanner';\nimport {PseudoElementScanner} from '../polymer/pseudo-element-scanner';\nimport {scan} from '../scanning/scan';\nimport {Scanner} from '../scanning/scanner';\nimport {UrlLoader} from '../url-loader/url-loader';\nimport {UrlResolver} from '../url-loader/url-resolver';\nimport {ElementScanner as VanillaElementScanner} from '../vanilla-custom-elements/element-scanner';\nimport {Severity, Warning, WarningCarryingException} from '../warning/warning';\n\nimport {AnalysisCache} from './analysis-cache';\n\n/**\n * Represents an Analyzer with a given AnalysisCache instance.\n *\n * Used to provide a consistent cache in the face of updates happening in\n * parallel with analysis work. A given AnalyzerCacheContext is forked via\n * either the fileChanged or clearCaches methods.\n *\n * For almost all purposes this is an entirely internal implementation detail.\n */\nexport class AnalyzerCacheContext {\n  private _parsers = new Map<string, Parser<ParsedDocument<any, any>>>([\n    ['html', new HtmlParser()],\n    ['js', new JavaScriptParser({sourceType: 'script'})],\n    ['css', new CssParser()],\n    ['json', new JsonParser()],\n  ]);\n\n  /** A map from import url to urls that document lazily depends on. */\n  private _lazyEdges: LazyEdgeMap|undefined;\n\n  private _scanners: ScannerTable;\n\n  private _loader: UrlLoader;\n  private _resolver: UrlResolver|undefined;\n\n  private _cache = new AnalysisCache();\n\n  private _telemetryTracker = new TelemetryTracker();\n  private _generation = 0;\n\n  private static _getDefaultScanners(lazyEdges: LazyEdgeMap|undefined) {\n    return new Map<string, Scanner<any, any, any>[]>([\n      [\n        'html',\n        [\n          new HtmlImportScanner(lazyEdges),\n          new HtmlScriptScanner(),\n          new HtmlStyleScanner(),\n          new DomModuleScanner(),\n          new CssImportScanner(),\n          new HtmlCustomElementReferenceScanner(),\n          new PseudoElementScanner()\n        ]\n      ],\n      [\n        'js',\n        [\n          new PolymerElementScanner(),\n          new BehaviorScanner(),\n          new VanillaElementScanner()\n        ]\n      ],\n    ]);\n  }\n\n  constructor(options: Options) {\n    this._loader = options.urlLoader;\n    this._resolver = options.urlResolver;\n    this._parsers = options.parsers || this._parsers;\n    this._lazyEdges = options.lazyEdges;\n    this._scanners = options.scanners ||\n        AnalyzerCacheContext._getDefaultScanners(this._lazyEdges);\n  }\n\n  /**\n   * Returns a copy of this cache context with proper cache invalidation.\n   */\n  filesChanged(urls: string[]) {\n    const newCache =\n        this._cache.invalidate(urls.map(url => this._resolveUrl(url)));\n    return this._fork(newCache);\n  }\n\n\n  /**\n   * Implements Analyzer#analyze, see its docs.\n   */\n  async analyze(url: string, contents?: string): Promise<Document> {\n    const resolvedUrl = this._resolveUrl(url);\n\n    return this._cache.analyzedDocumentPromises.getOrCompute(\n        resolvedUrl, async() => {\n          const doneTiming =\n              this._telemetryTracker.start('analyze: make document', url);\n          const scannedDocument = await this._scan(resolvedUrl, contents);\n          if (scannedDocument === 'visited') {\n        throw new Error(\n            `This should not happen. Got a cycle of length zero(!) scanning ${url\n            }`);\n          }\n          const document = this._makeDocument(scannedDocument);\n          doneTiming();\n          return document;\n        });\n  }\n\n  /**\n   * Constructs a new analyzed Document and adds it to the analyzed Document\n   * cache.\n   */\n  private _makeDocument(scannedDocument: ScannedDocument): Document {\n    const resolvedUrl = scannedDocument.url;\n\n    if (this._cache.analyzedDocuments.has(resolvedUrl)) {\n      throw new Error(`Internal error: document ${resolvedUrl} already exists`);\n    }\n\n    const document = new Document(scannedDocument, this);\n    this._cache.analyzedDocuments.set(resolvedUrl, document);\n    this._cache.analyzedDocumentPromises.getOrCompute(\n        resolvedUrl, async() => document);\n\n    document.resolve();\n    return document;\n  }\n\n  /**\n   * Gets an analyzed Document from the document cache. This is only useful for\n   * Analyzer plugins. You almost certainly want to use `analyze()` instead.\n   *\n   * If a document has been analyzed, it returns the analyzed Document. If not\n   * the scanned document cache is used and a new analyzed Document is returned.\n   * If a file is in neither cache, it returns `undefined`.\n   */\n  _getDocument(url: string): Document|undefined {\n    const resolvedUrl = this._resolveUrl(url);\n    let document = this._cache.analyzedDocuments.get(resolvedUrl);\n    if (document) {\n      return document;\n    }\n    const scannedDocument = this._cache.scannedDocuments.get(resolvedUrl);\n    return scannedDocument && this._makeDocument(scannedDocument);\n  }\n\n  /**\n   * This is only useful for Analyzer plugins.\n   *\n   * If a url has been scanned, returns the ScannedDocument.\n   */\n  _getScannedDocument(url: string): ScannedDocument|undefined {\n    const resolvedUrl = this._resolveUrl(url);\n    return this._cache.scannedDocuments.get(resolvedUrl);\n  }\n\n  async getTelemetryMeasurements(): Promise<Measurement[]> {\n    return this._telemetryTracker.getMeasurements();\n  }\n\n  /**\n   * Clear all cached information from this analyzer instance.\n   *\n   * Note: if at all possible, instead tell the analyzer about the specific\n   * files that changed rather than clearing caches like this. Caching provides\n   * large performance gains.\n   */\n  clearCaches(): AnalyzerCacheContext {\n    return this._fork(new AnalysisCache());\n  }\n\n  /**\n   * Return a copy, but with the given cache.\n   */\n  private _fork(cache: AnalysisCache): AnalyzerCacheContext {\n    const copy = new AnalyzerCacheContext({\n      lazyEdges: this._lazyEdges,\n      parsers: this._parsers,\n      scanners: this._scanners,\n      urlLoader: this._loader,\n      urlResolver: this._resolver\n    });\n    copy._telemetryTracker = this._telemetryTracker;\n    copy._cache = cache;\n    copy._generation = this._generation + 1;\n    return copy;\n  }\n\n  /**\n   * Scan a toplevel document and all of its transitive dependencies.\n   */\n  private async _scan(\n      resolvedUrl: string, contents?: string,\n      visited?: Set<string>): Promise<ScannedDocument|'visited'> {\n    if (visited && visited.has(resolvedUrl)) {\n      return 'visited';\n    }\n    const actualVisited = visited || new Set();\n    actualVisited.add(resolvedUrl);\n    const scannedDocument =\n        await this._cache.scannedDocumentPromises.getOrCompute(\n            resolvedUrl, async() => {\n              const parsedDoc = await this._parse(resolvedUrl, contents);\n              return this._scanDocument(parsedDoc, actualVisited);\n            });\n\n    /**\n     * We cache the act of scanning dependencies separately from the act of\n     * scanning a single file because while scanning is purely local to the\n     * file, we need to rescan a file's transitive dependencies before\n     * resolving if any of them have changed.\n     */\n    await this._cache.dependenciesScanned.getOrCompute(\n        scannedDocument.url, async() => {\n          await this._scanImports(scannedDocument, actualVisited);\n        });\n    return scannedDocument;\n  }\n\n  /**\n   * Scans a ParsedDocument.\n   */\n  private async _scanDocument(\n      document: ParsedDocument<any, any>, visited: Set<string>,\n      maybeAttachedComment?: string): Promise<ScannedDocument> {\n    const warnings: Warning[] = [];\n    const scannedFeatures = await this._getScannedFeatures(document);\n    // If there's an HTML comment that applies to this document then we assume\n    // that it applies to the first feature.\n    const firstScannedFeature = scannedFeatures[0];\n    if (firstScannedFeature && firstScannedFeature instanceof ScannedElement) {\n      firstScannedFeature.applyHtmlComment(maybeAttachedComment);\n    }\n\n    const scannedDocument =\n        new ScannedDocument(document, scannedFeatures, warnings);\n\n    if (!scannedDocument.isInline) {\n      if (this._cache.scannedDocuments.has(scannedDocument.url)) {\n        throw new Error(\n            'Scanned document already in cache. This should never happen.');\n      }\n      this._cache.scannedDocuments.set(scannedDocument.url, scannedDocument);\n    }\n    await this._scanInlineDocuments(scannedDocument, visited);\n\n    return scannedDocument;\n  }\n\n  private async _getScannedFeatures(document: ParsedDocument<any, any>):\n      Promise<ScannedFeature[]> {\n    const scanners = this._scanners.get(document.type);\n    if (scanners) {\n      return scan(document, scanners);\n    }\n    return [];\n  }\n\n  /**\n   * Scans all of the transitive dependencies of the given document.\n   *\n   * Uses the `visited` set to break cycles.\n   */\n  private async _scanImports(\n      scannedDocument: ScannedDocument, visited: Set<string>) {\n    if (scannedDocument.isInline) {\n      throw new Error(\n          'Internal Error: _scanImports must only be called with a toplevel ' +\n          'document, never an inline document.');\n    }\n    const scannedImports = scannedDocument.getNestedFeatures().filter(\n        (e) => e instanceof ScannedImport) as ScannedImport[];\n    for (const scannedImport of scannedImports) {\n      // TODO(garlicnation): Move this logic into model/document. During\n      // the recursive feature walk, features from lazy imports\n      // should be marked.\n      if (scannedImport.type === 'lazy-html-import') {\n        continue;\n      }\n\n      const url = this._resolveUrl(scannedImport.url);\n      try {\n        await this._scan(url, undefined, visited);\n      } catch (error) {\n        if (error instanceof NoKnownParserError) {\n          // We probably don't want to fail when importing something\n          // that we don't know about here.\n          continue;\n        }\n        error = error || '';\n        // TODO(rictic): move this to the resolve phase, it will be improperly\n        //     cached as it is.\n        scannedDocument.warnings.push({\n          code: 'could-not-load',\n          message: `Unable to load import: ${error.message || error}`,\n          sourceRange:\n              (scannedImport.urlSourceRange || scannedImport.sourceRange)!,\n          severity: Severity.ERROR\n        });\n      }\n    }\n\n    // Add the found dependencies to the dependency graph so that we can\n    // do cache expiry when a file changes.\n    this._cache.dependencyGraph.addDependenciesOf(\n        scannedDocument.url,\n        scannedImports.map(imp => this._resolveUrl(imp.url)));\n  }\n\n  private async _scanInlineDocuments(\n      containingDocument: ScannedDocument, visited: Set<string>) {\n    for (const feature of containingDocument.features) {\n      if (!(feature instanceof ScannedInlineDocument)) {\n        continue;\n      }\n      const locationOffset: LocationOffset = {\n        line: feature.locationOffset.line,\n        col: feature.locationOffset.col,\n        filename: containingDocument.url\n      };\n      try {\n        const parsedDoc = this._parseContents(\n            feature.type,\n            feature.contents,\n            containingDocument.url,\n            {locationOffset, astNode: feature.astNode});\n        const scannedDoc = await this._scanDocument(\n            parsedDoc, visited, feature.attachedComment);\n\n        feature.scannedDocument = scannedDoc;\n      } catch (err) {\n        if (err instanceof WarningCarryingException) {\n          containingDocument.warnings.push(err.warning);\n          continue;\n        }\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * Loads the content at the provided resolved URL.\n   *\n   * Currently does no caching. If the provided contents are given then they\n   * are used instead of hitting the UrlLoader (e.g. when you have in-memory\n   * contents that should override disk).\n   */\n  async load(resolvedUrl: string, providedContents?: string) {\n    if (!this._loader.canLoad(resolvedUrl)) {\n      throw new Error(`Can't load URL: ${resolvedUrl}`);\n    }\n    return providedContents == null ? await this._loader.load(resolvedUrl) :\n                                      providedContents;\n  }\n\n  /**\n   * Caching + loading wrapper around _parseContents.\n   */\n  private async _parse(resolvedUrl: string, providedContents?: string):\n      Promise<ParsedDocument<any, any>> {\n    return this._cache.parsedDocumentPromises.getOrCompute(\n        resolvedUrl, async() => {\n          const content = await this.load(resolvedUrl, providedContents);\n          const extension = path.extname(resolvedUrl).substring(1);\n\n          const doneTiming =\n              this._telemetryTracker.start('parse', 'resolvedUrl');\n          const parsedDoc =\n              this._parseContents(extension, content, resolvedUrl);\n          doneTiming();\n          return parsedDoc;\n        });\n  }\n\n  /**\n   * Parse the given string into the Abstract Syntax Tree (AST) corresponding\n   * to its type.\n   */\n  private _parseContents(\n      type: string, contents: string, url: string,\n      inlineInfo?: InlineDocInfo<any>): ParsedDocument<any, any> {\n    const parser = this._parsers.get(type);\n    if (parser == null) {\n      throw new NoKnownParserError(`No parser for for file type ${type}`);\n    }\n    try {\n      return parser.parse(contents, url, inlineInfo);\n    } catch (error) {\n      if (error instanceof WarningCarryingException) {\n        throw error;\n      }\n      throw new Error(`Error parsing ${url}:\\n ${error.stack}`);\n    }\n  }\n\n  /**\n   * Resolves a URL with this Analyzer's `UrlResolver` if it has one, otherwise\n   * returns the given URL.\n   */\n  private _resolveUrl(url: string): string {\n    return this._resolver && this._resolver.canResolve(url) ?\n        this._resolver.resolve(url) :\n        url;\n  }\n}\n"]}