{"version":3,"sources":["url-loader/package-url-resolver.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;;AAEH,+BAAsC;AACtC,6BAA2C;AAS3C;;GAEG;AACH;IAIE,YAAY,OAAmC;QAC7C,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,IAAI,mBAAmB,CAAC;QAChE,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC;IAC3C,CAAC;IAED,UAAU,CAAC,GAAW;QACpB,IAAI,SAAS,GAAG,WAAQ,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAI,QAAQ,GACR,YAAO,CAAC,SAAS,CAAC,kBAAkB,CAAC,SAAS,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,CAAC;QACpE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IAC5C,CAAC;IAED,QAAQ,CAAC,SAAc,EAAE,QAAgB;QACvC,MAAM,CAAC,CAAC,SAAS,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;YAChE,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAED,OAAO,CAAC,GAAW;QACjB,IAAI,SAAS,GAAG,WAAQ,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAI,QAAQ,GACR,YAAO,CAAC,SAAS,CAAC,kBAAkB,CAAC,SAAS,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,CAAC;QAEpE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;YACxC,MAAM,IAAI,KAAK,CAAC,eAAe,GAAG,EAAE,CAAC,CAAC;QACxC,CAAC;QAED,+DAA+D;QAC/D,sBAAsB;QACtB,EAAE,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC/B,QAAQ,GAAG,YAAO,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;QACpE,CAAC;QAED,gDAAgD;QAChD,EAAE,CAAC,CAAC,YAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACjC,QAAQ,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QACnC,CAAC;QACD,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;CACF;AA3CD,gDA2CC","file":"package-url-resolver.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {posix as pathlib} from 'path';\nimport {parse as parseUrl, Url} from 'url';\n\nimport {UrlResolver} from './url-resolver';\n\nexport interface PackageUrlResolverOptions {\n  componentDir?: string;\n  hostname?: string;\n}\n\n/**\n * Resolves a URL to a canonical URL within a package.\n */\nexport class PackageUrlResolver implements UrlResolver {\n  componentDir: string;\n  hostname: string|null;\n\n  constructor(options?: PackageUrlResolverOptions) {\n    options = options || {};\n    this.componentDir = options.componentDir || 'bower_components/';\n    this.hostname = options.hostname || null;\n  }\n\n  canResolve(url: string): boolean {\n    let urlObject = parseUrl(url);\n    let pathname =\n        pathlib.normalize(decodeURIComponent(urlObject.pathname || ''));\n    return this._isValid(urlObject, pathname);\n  }\n\n  _isValid(urlObject: Url, pathname: string) {\n    return (urlObject.hostname === this.hostname || !urlObject.hostname) &&\n        !pathname.startsWith('../../');\n  }\n\n  resolve(url: string): string {\n    let urlObject = parseUrl(url);\n    let pathname =\n        pathlib.normalize(decodeURIComponent(urlObject.pathname || ''));\n\n    if (!this._isValid(urlObject, pathname)) {\n      throw new Error(`Invalid URL ${url}`);\n    }\n\n    // If the path points to a sibling directory, resolve it to the\n    // component directory\n    if (pathname.startsWith('../')) {\n      pathname = pathlib.join(this.componentDir, pathname.substring(3));\n    }\n\n    // make all paths relative to the root directory\n    if (pathlib.isAbsolute(pathname)) {\n      pathname = pathname.substring(1);\n    }\n    return pathname;\n  }\n}\n"]}