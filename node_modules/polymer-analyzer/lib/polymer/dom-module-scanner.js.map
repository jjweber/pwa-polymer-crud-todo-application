{"version":3,"sources":["polymer/dom-module-scanner.ts"],"names":[],"mappings":"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","file":"dom-module-scanner.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as dom5 from 'dom5';\nimport {ASTNode, treeAdapters} from 'parse5';\n\nimport {HtmlVisitor, ParsedHtmlDocument} from '../html/html-document';\nimport {HtmlScanner} from '../html/html-scanner';\nimport {Feature, getAttachedCommentText, Resolvable, SourceRange, Slot} from '../model/model';\nimport {Warning} from '../warning/warning';\n\nconst p = dom5.predicates;\n\nconst isDomModule = p.hasTagName('dom-module');\n\nexport class ScannedDomModule implements Resolvable {\n  id: string|null;\n  node: ASTNode;\n  comment?: string;\n  sourceRange: SourceRange;\n  astNode: dom5.Node;\n  warnings: Warning[] = [];\n  slots: Slot[];\n\n  constructor(\n      id: string|null, node: ASTNode, sourceRange: SourceRange,\n      ast: dom5.Node, slots: Slot[]) {\n    this.id = id;\n    this.node = node;\n    this.comment = getAttachedCommentText(node);\n    this.sourceRange = sourceRange;\n    this.astNode = ast;\n    this.slots = slots;\n  }\n\n  resolve() {\n    return new DomModule(\n        this.node,\n        this.id,\n        this.comment,\n        this.sourceRange,\n        this.astNode,\n        this.warnings,\n        this.slots);\n  }\n}\n\nexport class DomModule implements Feature {\n  kinds = new Set(['dom-module']);\n  identifiers = new Set<string>();\n  node: ASTNode;\n  id: string|null;\n  comment?: string;\n  sourceRange: SourceRange;\n  astNode: dom5.Node;\n  warnings: Warning[];\n  slots: Slot[];\n\n  constructor(\n      node: ASTNode, id: string|null, comment: string|undefined,\n      sourceRange: SourceRange, ast: dom5.Node, warnings: Warning[],\n      slots: Slot[]) {\n    this.node = node;\n    this.id = id;\n    this.comment = comment;\n    if (id) {\n      this.identifiers.add(id);\n    }\n    this.sourceRange = sourceRange;\n    this.astNode = ast;\n    this.warnings = warnings;\n    this.slots = slots;\n  }\n}\n\nexport class DomModuleScanner implements HtmlScanner {\n  async scan(\n      document: ParsedHtmlDocument,\n      visit: (visitor: HtmlVisitor) => Promise<void>):\n      Promise<ScannedDomModule[]> {\n    let domModules: ScannedDomModule[] = [];\n\n    await visit((node) => {\n      if (isDomModule(node)) {\n        const template = dom5.query(node, dom5.predicates.hasTagName('template'));\n        let slots: Slot[] = [];\n        if (template) {\n          slots = dom5.queryAll(\n            treeAdapters.default.getTemplateContent(template),\n            dom5.predicates.hasTagName('slot')\n          ).map(s => new Slot(dom5.getAttribute(s, 'name') || '', document.sourceRangeForNode(s)!));\n        }\n        domModules.push(new ScannedDomModule(\n            dom5.getAttribute(node, 'id'),\n            node,\n            document.sourceRangeForNode(node)!,\n            node,\n            slots));\n      }\n    });\n    return domModules;\n  }\n}\n"]}