{"version":3,"sources":["polymer/polymer2-element-scanner.ts"],"names":[],"mappings":"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","file":"polymer2-element-scanner.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as estree from 'estree';\n\nimport * as astValue from '../javascript/ast-value';\nimport {getIdentifierName} from '../javascript/ast-value';\nimport {Visitor} from '../javascript/estree-visitor';\nimport * as esutil from '../javascript/esutil';\nimport {getPropertyValue} from '../javascript/esutil';\nimport {JavaScriptDocument} from '../javascript/javascript-document';\nimport {JavaScriptScanner} from '../javascript/javascript-scanner';\nimport * as jsdoc from '../javascript/jsdoc';\nimport {ScannedElement, ScannedFeature} from '../model/model';\n\nimport {analyzeProperties} from './analyze-properties';\nimport {Options as PolymerElementOptions, ScannedPolymerElement, ScannedPolymerProperty} from './polymer-element';\n\nexport interface ScannedAttribute extends ScannedFeature {\n  name: string;\n  type?: string;\n}\n\nexport class Polymer2ElementScanner implements JavaScriptScanner {\n  async scan(\n      document: JavaScriptDocument,\n      visit: (visitor: Visitor) => Promise<void>): Promise<ScannedElement[]> {\n    let visitor = new ElementVisitor(document);\n    await visit(visitor);\n    return visitor.getRegisteredElements();\n  }\n}\n\nclass ElementVisitor implements Visitor {\n  private _possibleElements = new Map<string, ScannedElement>();\n  private _registeredButNotFound = new Map<string, string>();\n  private _elements: ScannedElement[] = [];\n  private _document: JavaScriptDocument;\n\n  constructor(document: JavaScriptDocument) {\n    this._document = document;\n  }\n\n  enterClassExpression(node: estree.ClassExpression, parent: estree.Node) {\n    if (parent.type !== 'AssignmentExpression' &&\n        parent.type !== 'VariableDeclarator') {\n      return;\n    }\n    let className = astValue.getIdentifierName(\n        parent.type === 'AssignmentExpression' ? parent.left : parent.id);\n    if (className == null) {\n      return;\n    }\n    const element = this._handleClass(node);\n    if (element) {\n      element.className = className;\n      this._possibleElements.set(element.className, element);\n    }\n  }\n\n  enterClassDeclaration(node: estree.ClassDeclaration) {\n    const element = this._handleClass(node);\n    if (element) {\n      element.className = node.id.name;\n      this._possibleElements.set(element.className, element);\n    }\n  }\n\n  private _handleClass(node: estree.ClassDeclaration|estree.ClassExpression) {\n    const comment = esutil.getAttachedComment(node) || '';\n    const docs = jsdoc.parseJsdoc(comment);\n    const config = this._getConfig(node);\n\n    const elementOptions: PolymerElementOptions = {\n      description: (docs.description || '').trim(),\n      events: esutil.getEventComments(node),\n      sourceRange: this._document.sourceRangeForNode(node),\n      properties: (config && this._getProperties(config)) || [],\n    };\n\n    // TODO(justinfagnani): figure out how or if to reconcile attributes\n    // elementOptions.attributes = this._getObservedAttributes(node) ||\n    //     (element.properties as ScannedPolymerProperty[])\n    //         .filter((p) => p.notify == true)\n    //         .map((p) => p.name);\n\n    if (node.superClass) {\n      elementOptions.superClass = getIdentifierName(node.superClass);\n    }\n\n    const element = new ScannedPolymerElement(elementOptions);\n\n    if (this._hasPolymerDocTag(docs)) {\n      this._elements.push(element);\n    }\n    return element;\n  }\n\n  enterCallExpression(node: estree.CallExpression) {\n    const callee = astValue.getIdentifierName(node.callee);\n    if (!(callee === 'window.customElements.define' ||\n          callee === 'customElements.define')) {\n      return;\n    }\n    const tagName =\n        node.arguments[0] && astValue.expressionToValue(node.arguments[0]);\n    if (tagName == null || (typeof tagName !== 'string')) {\n      return;\n    }\n    const elementDefn = node.arguments[1];\n    if (elementDefn == null) {\n      return;\n    }\n    const element: ScannedElement|null = this._getElement(tagName, elementDefn);\n    if (!element) {\n      return;\n    }\n    element.tagName = tagName;\n    this._elements.push(element);\n  }\n\n  private _getElement(tagName: string, elementDefn: estree.Node): ScannedElement\n      |null {\n    const className = astValue.getIdentifierName(elementDefn);\n    if (className) {\n      const element = this._possibleElements.get(className);\n      if (element) {\n        this._possibleElements.delete(className);\n        return element;\n      } else {\n        this._registeredButNotFound.set(className, tagName);\n        return null;\n      }\n    }\n    if (elementDefn.type === 'ClassExpression') {\n      return this._handleClass(elementDefn);\n    }\n    return null;\n  }\n\n  private _hasPolymerDocTag(docs: jsdoc.Annotation) {\n    const tags = docs.tags || [];\n    const elementTags =\n        tags.filter((t: jsdoc.Tag) => t.tag === 'polymerElement');\n    return elementTags.length >= 1;\n  }\n\n  private _getConfig(node: estree.ClassDeclaration|\n                     estree.ClassExpression): estree.ObjectExpression|null {\n    const possibleConfigs = node.body.body.filter(\n        (n) => n.type === 'MethodDefinition' && n.static === true &&\n            n.kind === 'get' && getIdentifierName(n.key) === 'config');\n    const config = possibleConfigs.length === 1 && possibleConfigs[0];\n    if (!config) {\n      return null;\n    }\n\n    const configBody = config.value.body;\n    if (configBody.body.length !== 1) {\n      // not a single statement function\n      return null;\n    }\n    if (configBody.body[0].type !== 'ReturnStatement') {\n      return null;\n    }\n\n    const returnStatement = configBody.body[0] as estree.ReturnStatement;\n    const returnValue = returnStatement.argument;\n    if (!returnValue || returnValue.type !== 'ObjectExpression') {\n      // TODO: warn\n      return null;\n    }\n    return returnValue as estree.ObjectExpression;\n  }\n\n  private _getProperties(node: estree.ObjectExpression):\n      ScannedPolymerProperty[] {\n    const propertiesNode = getPropertyValue(node, 'properties');\n    return propertiesNode ? analyzeProperties(propertiesNode, this._document) :\n                            [];\n  }\n\n  // TODO(justinfagnani): move to vanilla element scanner\n  // private _getObservedAttributes(node:\n  // estree.ClassDeclaration|estree.ClassExpression) {\n  //   const observedAttributesNode: estree.MethodDefinition =\n  //       node.body.body.find((n) =>\n  //         n.type === 'MethodDefinition' &&\n  //         n.static === true &&\n  //         astValue.getIdentifierName(n.key) === 'observedAttributes');\n  //\n  //   if (observedAttributesNode) {\n  //     const body = observedAttributesNode.value.body.body[0];\n  //     if (body && body.type === 'ReturnStatement' &&\n  //         body.argument.type === 'ArrayExpression') {\n  //       return this._extractAttributesFromObservedAttributes(body.argument);\n  //     }\n  //   }\n  // }\n\n  /**\n   * Gets all found elements. Can only be called once.\n   */\n  getRegisteredElements(): ScannedElement[] {\n    const results = this._elements;\n    for (const classAndTag of this._registeredButNotFound.entries()) {\n      const className = classAndTag[0];\n      const tagName = classAndTag[1];\n      const element = this._possibleElements.get(className);\n      if (element) {\n        element.className = className;\n        element.tagName = tagName;\n        results.push(element);\n      }\n    }\n    return results;\n  }\n}\n"]}