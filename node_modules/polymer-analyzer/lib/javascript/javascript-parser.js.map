{"version":3,"sources":["javascript/javascript-parser.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;;AAEH,iCAAiC;AAGjC,0CAAiE;AAEjE,gDAAsE;AAEtE,+DAAyD;AAQzD;IAGE,YAAY,OAA0C;QACpD,OAAO,CAAC,MAAM,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC;QAChC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,IAAI,IAAI,CAAC,CAAC;QAC3C,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;IACvC,CAAC;IAED,KAAK,CAAC,QAAgB,EAAE,GAAW,EAAE,UAA+B;QAElE,MAAM,QAAQ,GAAG,CAAC,CAAC,UAAU,CAAC;QAC9B,UAAU,GAAG,UAAU,IAAI,EAAE,CAAC;QAC9B,IAAI,GAAY,CAAC;QACjB,IAAI,CAAC;YACH,GAAG,GAAY,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE;gBACpC,WAAW,EAAE,CAAC;gBACd,aAAa,EAAE,IAAI;gBACnB,OAAO,EAAE,IAAI;gBACb,GAAG,EAAE,IAAI;gBACT,UAAU,EAAE,IAAI,CAAC,UAAU;aAC5B,CAAC,CAAC;QACL,CAAE;QAAA,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACb,EAAE,CAAC,CAAC,GAAG,YAAY,WAAW,CAAC,CAAC,CAAC;gBAC/B,MAAM,IAAI,kCAAwB,CAAC;oBACjC,OAAO,EAAE,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACnC,QAAQ,EAAE,kBAAQ,CAAC,KAAK;oBACxB,IAAI,EAAE,aAAa;oBACnB,WAAW,EAAE,0BAAkB,CAC3B;wBACE,IAAI,EAAE,GAAG;wBACT,KAAK,EAAE,EAAC,IAAI,EAAE,GAAG,CAAC,UAAU,GAAG,CAAC,EAAE,MAAM,EAAE,GAAG,CAAC,MAAM,GAAG,CAAC,EAAC;wBACzD,GAAG,EAAE,EAAC,IAAI,EAAE,GAAG,CAAC,UAAU,GAAG,CAAC,EAAE,MAAM,EAAE,GAAG,CAAC,MAAM,GAAG,CAAC,EAAC;qBACxD,EACD,UAAU,CAAC,cAAc,CAAE;iBAChC,CAAC,CAAC;YACL,CAAC;YACD,MAAM,GAAG,CAAC;QACZ,CAAC;QAED,MAAM,CAAC,IAAI,wCAAkB,CAAC;YAC5B,GAAG;YACH,QAAQ;YACR,GAAG;YACH,cAAc,EAAE,UAAU,CAAC,cAAc;YACzC,OAAO,EAAE,UAAU,CAAC,OAAO,EAAE,QAAQ;SACtC,CAAC,CAAC;IACL,CAAC;CACF;AAhDD,4CAgDC","file":"javascript-parser.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as espree from 'espree';\nimport {Program} from 'estree';\n\nimport {correctSourceRange, InlineDocInfo} from '../model/model';\nimport {Parser} from '../parser/parser';\nimport {Severity, WarningCarryingException} from '../warning/warning';\n\nimport {JavaScriptDocument} from './javascript-document';\n\ndeclare class SyntaxError {\n  message: string;\n  lineNumber: number;\n  column: number;\n}\n\nexport class JavaScriptParser implements Parser<JavaScriptDocument> {\n  sourceType: 'module'|'script';\n\n  constructor(options: {sourceType: 'module' | 'script'}) {\n    console.assert(options != null);\n    console.assert(options.sourceType != null);\n    this.sourceType = options.sourceType;\n  }\n\n  parse(contents: string, url: string, inlineInfo?: InlineDocInfo<any>):\n      JavaScriptDocument {\n    const isInline = !!inlineInfo;\n    inlineInfo = inlineInfo || {};\n    let ast: Program;\n    try {\n      ast = <Program>espree.parse(contents, {\n        ecmaVersion: 8,\n        attachComment: true,\n        comment: true,\n        loc: true,\n        sourceType: this.sourceType,\n      });\n    } catch (err) {\n      if (err instanceof SyntaxError) {\n        throw new WarningCarryingException({\n          message: err.message.split('\\n')[0],\n          severity: Severity.ERROR,\n          code: 'parse-error',\n          sourceRange: correctSourceRange(\n              {\n                file: url,\n                start: {line: err.lineNumber - 1, column: err.column - 1},\n                end: {line: err.lineNumber - 1, column: err.column - 1}\n              },\n              inlineInfo.locationOffset)!\n        });\n      }\n      throw err;\n    }\n\n    return new JavaScriptDocument({\n      url,\n      contents,\n      ast,\n      locationOffset: inlineInfo.locationOffset,\n      astNode: inlineInfo.astNode, isInline,\n    });\n  }\n}\n"]}