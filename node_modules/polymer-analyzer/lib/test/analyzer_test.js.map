{"version":3,"sources":["test/analyzer_test.ts"],"names":[],"mappings":"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","file":"analyzer_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/// <reference path=\"../../node_modules/@types/mocha/index.d.ts\" />\n\nimport {assert} from 'chai';\nimport * as clone from 'clone';\nimport * as estree from 'estree';\nimport * as shady from 'shady-css-parser';\n\nimport {Analyzer} from '../analyzer';\nimport {ParsedCssDocument} from '../css/css-document';\nimport {ParsedHtmlDocument} from '../html/html-document';\nimport {HtmlParser} from '../html/html-parser';\nimport {ScriptTagImport} from '../html/html-script-tag';\nimport {JavaScriptDocument} from '../javascript/javascript-document';\nimport {Document, Import, ScannedImport, ScannedInlineDocument} from '../model/model';\nimport {FSUrlLoader} from '../url-loader/fs-url-loader';\nimport {UrlLoader} from '../url-loader/url-loader';\nimport {UrlResolver} from '../url-loader/url-resolver';\nimport {Deferred} from '../utils';\n\nimport {invertPromise} from './test-utils';\n\nimport stripIndent = require('strip-indent');\n\nclass TestUrlResolver implements UrlResolver {\n  canResolve(url: string) {\n    return (url === 'test.com/test.html');\n  }\n\n  resolve(url: string) {\n    return (url === 'test.com/test.html') ? '/static/html-parse-target.html' :\n                                            url;\n  }\n}\n\nsuite('Analyzer', () => {\n  let analyzer: Analyzer;\n\n  setup(() => {\n    analyzer = new Analyzer({\n      urlLoader: new FSUrlLoader(__dirname),\n      urlResolver: new TestUrlResolver(),\n    });\n  });\n\n  suite('analyze()', () => {\n\n    test(\n        'analyzes a document with an inline Polymer element feature',\n        async() => {\n          const document = await analyzer.analyze(\n              'static/analysis/simple/simple-element.html');\n          const elements = Array.from(document.getByKind('element'));\n          assert.deepEqual(elements.map(e => e.tagName), ['simple-element']);\n        });\n\n    test(\n        'analyzes a document with an external Polymer element feature',\n        async() => {\n          const document = await analyzer.analyze(\n              'static/analysis/separate-js/element.html');\n          const elements = Array.from(document.getByKind('element'));\n          assert.deepEqual(elements.map(e => e.tagName), ['my-element']);\n        });\n\n    test('analyzes a document with an import', async() => {\n      const document =\n          await analyzer.analyze('static/analysis/behaviors/behavior.html');\n\n      const behaviors = Array.from(document.getByKind('behavior'));\n      assert.deepEqual(\n          behaviors.map(b => b.className),\n          ['MyNamespace.SubBehavior', 'MyNamespace.SimpleBehavior']);\n    });\n\n    test(\n        'creates a document warning when a behavior cannot be found in that document',\n        async() => {\n          let document =\n              await analyzer.analyze('static/html-missing-behaviors.html');\n          // TODO(#372): this should be false, we should treat inline documents\n          //     as not requiring `deep` to be true.\n          let warnings = document.getWarnings(true);\n          assert.deepEqual(warnings, [\n            {\n              message:\n                  'Unable to resolve behavior `Polymer.ExpectedMissingBehavior`. ' +\n                  'Did you import it? Is it annotated with @polymerBehavior?',\n              severity: 0,\n              code: 'unknown-polymer-behavior',\n              sourceRange: {\n                file: 'static/html-missing-behaviors.html',\n                start: {\n                  line: 23,\n                  column: 8,\n                },\n                end: {\n                  line: 23,\n                  column: 39,\n                }\n              }\n            }\n          ]);\n        });\n\n    test(\n        'creates \"missing behavior\" warnings on imported documents without elements',\n        async() => {\n          let document = await analyzer.analyze(\n              'static/chained-missing-behavior/index.html');\n          let chainedDocument = document.getOnlyAtId(\n              'document', 'static/chained-missing-behavior/chained.html')!;\n          let expectedWarning = {\n            code: 'unknown-polymer-behavior',\n            message:\n                'Unable to resolve behavior `NotFoundBehavior`. Did you import it? Is it annotated with @polymerBehavior?',\n            severity: 0,\n            sourceRange: {\n              end: {column: 55, line: 2},\n              start: {column: 39, line: 2},\n              file: 'static/chained-missing-behavior/chained.html'\n            },\n          };\n          assert.deepEqual(document.getWarnings(false), []);\n          assert.deepEqual(document.getWarnings(true), [expectedWarning]);\n          // TODO(#372): this should be false, we should treat inline documents\n          //     as not requiring `deep` to be true.\n          assert.deepEqual(\n              chainedDocument.getWarnings(true), [expectedWarning]);\n        });\n\n    test(\n        'an inline document can find features from its container document',\n        async() => {\n          const document =\n              await analyzer.analyze('static/analysis/behaviors/behavior.html');\n          // TODO(justinfagnani): make a shallow option and check that this only\n          // has itself and an inline document, but not the sub-document. For\n          // now check that this fixture has 4 documents: behavior.html,\n          // subbehavior.html, and their inline js documents\n          const documents = document.getByKind('document');\n          assert.equal(documents.size, 4);\n\n          const inlineDocuments =\n              Array.from(document.getFeatures(false))\n                  .filter(\n                      (d) => d instanceof Document && d.isInline) as Document[];\n          assert.equal(inlineDocuments.length, 1);\n\n          // This is the main purpose of the test: get a feature from the inline\n          // document that's imported by the container document\n          const behaviorJsDocument = inlineDocuments[0];\n          const subBehavior = behaviorJsDocument.getOnlyAtId(\n              'behavior', 'MyNamespace.SubBehavior');\n          assert.equal(subBehavior!.className, 'MyNamespace.SubBehavior');\n        });\n\n    test(\n        'an inline script can find features from its container document',\n        async() => {\n          const document = await analyzer.analyze(\n              'static/script-tags/inline/test-element.html');\n          // TODO(justinfagnani): this could be better with a shallow\n          // Document.getByKind()\n          const inlineDocuments =\n              Array.from(document.getFeatures(false))\n                  .filter(\n                      (d) => d instanceof Document && d.isInline) as Document[];\n          assert.equal(inlineDocuments.length, 1);\n          const inlineJsDocument = inlineDocuments[0];\n\n          // The inline document can find the container's imported features\n          const subBehavior =\n              inlineJsDocument.getOnlyAtId('behavior', 'TestBehavior');\n          assert.equal(subBehavior!.className, 'TestBehavior');\n        });\n\n    test(\n        'an external script can find features from its container document',\n        async() => {\n          const document = await analyzer.analyze(\n              'static/script-tags/external/test-element.html');\n\n          const htmlScriptTags = Array.from(document.getByKind('html-script'));\n          assert.equal(htmlScriptTags.length, 1);\n\n          const htmlScriptTag = htmlScriptTags[0] as ScriptTagImport;\n          const scriptDocument = htmlScriptTag.document;\n\n          // The inline document can find the container's imported features\n          const subBehavior =\n              scriptDocument.getOnlyAtId('behavior', 'TestBehavior');\n          assert.equal(subBehavior!.className, 'TestBehavior');\n        });\n\n\n    // This test is nearly identical to the previous, but covers a different\n    // issue.\n    // PolymerElement must find behaviors while resolving, and if inline\n    // documents don't add a document feature for their container until after\n    // resolution, then the element can't find them and throws.\n    test(\n        'an inline document can find behaviors from its container document',\n        async() => {\n          const document = await analyzer.analyze(\n              'static/analysis/behaviors/elementdir/element.html');\n\n          // TODO(justinfagnani): make a shallow option and check that this only\n          // has\n          // itself and an inline document, but not the sub-document. For now\n          // check\n          // that this fixture has 6 documents: element.html, behavior.html,\n          // subbehavior.html, and their inline js documents\n          const documents = document.getByKind('document');\n          assert.equal(documents.size, 6);\n\n          const inlineDocuments =\n              Array.from(document.getFeatures(false))\n                  .filter(\n                      (d) => d instanceof Document && d.isInline) as Document[];\n          assert.equal(inlineDocuments.length, 1);\n\n          // This is the main purpose of the test: get a feature from the inline\n          // document that's imported by the container document\n          const behaviorJsDocument = inlineDocuments[0];\n          const subBehavior = behaviorJsDocument.getOnlyAtId(\n              'behavior', 'MyNamespace.SubBehavior');\n          assert.equal(subBehavior!.className, 'MyNamespace.SubBehavior');\n        });\n\n    test('returns a Document with warnings for malformed files', async() => {\n      const document = await analyzer.analyze('static/malformed.html');\n      assert(document.getWarnings().length >= 1);\n    });\n\n    test('analyzes transitive dependencies', async() => {\n      const root = await analyzer.analyze('static/dependencies/root.html');\n\n      // If we ask for documents we get every document in evaluation order.\n      assert.deepEqual(\n          Array.from(root.getByKind('document'))\n              .map((d) => [d.url, d.parsedDocument.type, d.isInline]),\n          [\n            ['static/dependencies/root.html', 'html', false],\n            ['static/dependencies/inline-only.html', 'html', false],\n            ['static/dependencies/inline-only.html', 'js', true],\n            ['static/dependencies/inline-only.html', 'css', true],\n            ['static/dependencies/leaf.html', 'html', false],\n            ['static/dependencies/inline-and-imports.html', 'html', false],\n            ['static/dependencies/inline-and-imports.html', 'js', true],\n            ['static/dependencies/subfolder/in-folder.html', 'html', false],\n            [\n              'static/dependencies/subfolder/subfolder-sibling.html',\n              'html',\n              false\n            ],\n            ['static/dependencies/inline-and-imports.html', 'css', true],\n          ]);\n\n      // If we ask for imports we get the import statements in evaluation order.\n      // Unlike documents, we can have duplicates here because imports exist\n      // in distinct places in their containing docs.\n      assert.deepEqual(Array.from(root.getByKind('import')).map((d) => d.url), [\n        'static/dependencies/inline-only.html',\n        'static/dependencies/leaf.html',\n        'static/dependencies/inline-and-imports.html',\n        'static/dependencies/subfolder/in-folder.html',\n        'static/dependencies/subfolder/subfolder-sibling.html',\n        'static/dependencies/subfolder/in-folder.html',\n      ]);\n\n      const inlineOnly =\n          root.getOnlyAtId('document', 'static/dependencies/inline-only.html');\n      assert.deepEqual(\n          Array.from(inlineOnly!.getByKind('document'))\n              .map((d) => d.parsedDocument.type),\n          ['html', 'js', 'css']);\n\n      const leaf =\n          root.getOnlyAtId('document', 'static/dependencies/leaf.html');\n      assert.deepEqual(Array.from(leaf!.getByKind('document')), [leaf]);\n\n      const inlineAndImports = root.getOnlyAtId(\n          'document', 'static/dependencies/inline-and-imports.html');\n      assert.deepEqual(\n          Array.from(inlineAndImports!.getByKind('document'))\n              .map((d) => d.parsedDocument.type),\n          ['html', 'js', 'html', 'html', 'css']);\n      const inFolder = root.getOnlyAtId(\n          'document', 'static/dependencies/subfolder/in-folder.html');\n      assert.deepEqual(\n          Array.from(inFolder!.getByKind('document')).map(d => d.url), [\n            'static/dependencies/subfolder/in-folder.html',\n            'static/dependencies/subfolder/subfolder-sibling.html'\n          ]);\n\n      // check de-duplication\n      assert.equal(\n          inlineAndImports!.getOnlyAtId(\n              'document', 'static/dependencies/subfolder/in-folder.html'),\n          inFolder);\n    });\n\n    test(`rejects for files that don't exist`, async() => {\n      await invertPromise(analyzer.analyze('/static/does_not_exist'));\n    });\n\n    test('handles documents from multiple calls to analyze()', async() => {\n      await analyzer.analyze('static/caching/file1.html');\n      await analyzer.analyze('static/caching/file2.html');\n    });\n\n    test('handles mutually recursive documents', async() => {\n      const document = await analyzer.analyze('static/circular/mutual-a.html');\n      const shallowFeatures = document.getFeatures(false);\n      assert.deepEqual(\n          Array.from(shallowFeatures)\n              .filter(f => f.kinds.has('document'))\n              .map(f => (f as Document).url),\n          ['static/circular/mutual-a.html']);\n      assert.deepEqual(\n          Array.from(shallowFeatures)\n              .filter(f => f.kinds.has('import'))\n              .map(f => (f as Import).url),\n          ['static/circular/mutual-b.html']);\n\n      const deepFeatures = document.getFeatures(true);\n      assert.deepEqual(\n          Array.from(deepFeatures)\n              .filter(f => f.kinds.has('document'))\n              .map(f => (f as Document).url),\n          ['static/circular/mutual-a.html', 'static/circular/mutual-b.html']);\n      assert.deepEqual(\n          Array.from(deepFeatures)\n              .filter(f => f.kinds.has('import'))\n              .map(f => (f as Import).url),\n          ['static/circular/mutual-b.html', 'static/circular/mutual-a.html']);\n    });\n\n    test('handles a document importing itself', async() => {\n      const document =\n          await analyzer.analyze('static/circular/self-import.html');\n      const features = document.getFeatures(true);\n      assert.deepEqual(\n          Array.from(features)\n              .filter(f => f.kinds.has('document'))\n              .map(f => (f as Document).url),\n          ['static/circular/self-import.html']);\n      assert.deepEqual(\n          Array.from(features)\n              .filter(f => f.kinds.has('import'))\n              .map(f => (f as Import).url),\n          [\n            'static/circular/self-import.html',\n            'static/circular/self-import.html'\n          ]);\n    });\n  });\n\n  // TODO: reconsider whether we should test these private methods.\n  suite('_parse()', () => {\n\n    test('loads and parses an HTML document', async() => {\n      const doc = await analyzer['_cacheContext']['_parse'](\n          'static/html-parse-target.html');\n      assert.instanceOf(doc, ParsedHtmlDocument);\n      assert.equal(doc.url, 'static/html-parse-target.html');\n    });\n\n    test('loads and parses a JavaScript document', async() => {\n      const doc =\n          await analyzer['_cacheContext']['_parse']('static/js-elements.js');\n      assert.instanceOf(doc, JavaScriptDocument);\n      assert.equal(doc.url, 'static/js-elements.js');\n    });\n\n    test('returns a Promise that rejects for non-existant files', async() => {\n      await invertPromise(\n          analyzer['_cacheContext']['_parse']('static/not-found'));\n    });\n  });\n\n  suite('_getScannedFeatures()', () => {\n    test('default import scanners', async() => {\n      let contents = `<html><head>\n          <link rel=\"import\" href=\"polymer.html\">\n          <script src=\"foo.js\"></script>\n          <link rel=\"stylesheet\" href=\"foo.css\"></link>\n        </head></html>`;\n      const document = new HtmlParser().parse(contents, 'test.html');\n      const features = <ScannedImport[]>(\n          await analyzer['_cacheContext']['_getScannedFeatures'](document));\n      assert.deepEqual(\n          features.map(e => e.type),\n          ['html-import', 'html-script', 'html-style']);\n      assert.deepEqual(\n          features.map(e => e.url),  //\n          ['polymer.html', 'foo.js', 'foo.css']);\n    });\n\n    test('polymer css import scanner', async() => {\n      let contents = `<html><head>\n          <link rel=\"import\" type=\"css\" href=\"foo.css\">\n        </head>\n        <body>\n          <dom-module>\n            <link rel=\"import\" type=\"css\" href=\"bar.css\">\n          </dom-module>\n        </body></html>`;\n      const document = new HtmlParser().parse(contents, 'test.html');\n      const features =\n          <ScannedImport[]>(\n              await analyzer['_cacheContext']['_getScannedFeatures'](document))\n              .filter(e => e instanceof ScannedImport);\n      assert.equal(features.length, 1);\n      assert.equal(features[0].type, 'css-import');\n      assert.equal(features[0].url, 'bar.css');\n    });\n\n    test('HTML inline document scanners', async() => {\n      let contents = `<html><head>\n          <script>console.log('hi')</script>\n          <style>body { color: red; }</style>\n        </head></html>`;\n      const document = new HtmlParser().parse(contents, 'test.html');\n      const features = <ScannedInlineDocument[]>(\n          await analyzer['_cacheContext']['_getScannedFeatures'](document));\n\n      assert.equal(features.length, 2);\n      assert.instanceOf(features[0], ScannedInlineDocument);\n      assert.instanceOf(features[1], ScannedInlineDocument);\n    });\n\n    const testName =\n        'HTML inline documents can be cloned, modified, and stringified';\n    test(testName, async() => {\n      const contents = stripIndent(`\n        <div>\n          <script>\n            console.log('foo');\n          </script>\n          <style>\n            body {\n              color: blue;\n            }\n          </style>\n        </div>\n      `).trim();\n      const expectedContents = stripIndent(`\n        <div>\n          <script>\n            console.log('bar');\n          </script>\n          <style>\n            body {\n              color: red;\n            }\n          </style>\n        </div>\n      `).trim();\n      const origDocument = await analyzer.analyze('test-doc.html', contents);\n      const document = clone(origDocument);\n\n      // In document, we'll change `foo` to `bar` in the js and `blue` to\n      // `red` in the css.\n      const jsDocs = document.getByKind('js-document') as Set<Document>;\n      assert.equal(1, jsDocs.size);\n      const jsDoc = jsDocs.values().next().value;\n      (jsDoc.parsedDocument as JavaScriptDocument).visit([{\n        enterCallExpression(node: estree.CallExpression) {\n          node.arguments =\n              [{type: 'Literal', value: 'bar', raw: 'bar'}] as estree.Literal[];\n        }\n      }]);\n\n      const cssDocs = document.getByKind('css-document') as Set<Document>;\n      assert.equal(1, cssDocs.size);\n      const cssDoc = cssDocs.values().next().value;\n      (cssDoc.parsedDocument as ParsedCssDocument).visit([{\n        visit(node: shady.Node) {\n          if (node.type === 'expression' && node.text === 'blue') {\n            node.text = 'red';\n          }\n        }\n      }]);\n\n      // We can stringify the clone and get the modified contents, and\n      // stringify the original and still get the original contents.\n      assert.deepEqual(document.stringify(), expectedContents);\n      assert.deepEqual(origDocument.stringify(), contents);\n    });\n  });\n\n  suite('legacy tests', () => {\n\n    // ported from old js-parser_test.js\n    // FIXME(rictic): I've temporarily disabled most recognition of Polymer ES6\n    //     classes because the scanner is buggy and triggers when it shouldn't.\n    test.skip('parses classes', async() => {\n      const document = await analyzer.analyze('static/es6-support.js');\n\n      const elements = Array.from(document.getByKind('polymer-element'));\n      assert.deepEqual(\n          elements.map(e => e.tagName), ['test-seed', 'test-element']);\n      const testSeed = elements[0];\n\n      assert.deepEqual(\n          testSeed.behaviorAssignments, ['Behavior1', 'Behavior2']);\n      assert.equal(testSeed.tagName, 'test-seed');\n\n      assert.equal(testSeed.observers.length, 2);\n      assert.equal(testSeed.properties.length, 4);\n\n      assert.deepEqual(\n          testSeed.events.map(e => e.name), ['fired-event', 'data-changed']);\n    });\n  });\n\n  suite('race conditions and caching', () => {\n\n    class RacyUrlLoader implements UrlLoader {\n      constructor(\n          public pathToContentsMap: Map<string, string>,\n          private waitFunction: () => Promise<void>) {\n      }\n      canLoad() {\n        return true;\n      }\n      async load(path: string) {\n        await this.waitFunction();\n        const contents = this.pathToContentsMap.get(path);\n        if (contents != null) {\n          return contents;\n        }\n        throw new Error(`no known contents for ${path}`);\n      }\n    }\n\n    const editorSimulator = async(waitFn: () => Promise<void>) => {\n      // Here we're simulating a lot of noop-changes to base.html, which has\n      // two imports, which mutually import a common dep. This stresses the\n      // analyzer's caching.\n\n      const contentsMap = new Map<string, string>([\n        [\n          'base.html',\n          `<link rel=\"import\" href=\"a.html\">\\n<link rel=\"import\" href=\"b.html\">`\n        ],\n        ['a.html', `<link rel=\"import\" href=\"common.html\">`],\n        ['b.html', `<link rel=\"import\" href=\"common.html\">`],\n        ['common.html', `<custom-el></custom-el>`],\n      ]);\n      const analyzer =\n          new Analyzer({urlLoader: new RacyUrlLoader(contentsMap, waitFn)});\n      const promises: Promise<Document>[] = [];\n      const intermediatePromises: Promise<void>[] = [];\n      for (let i = 0; i < 30; i++) {\n        await waitFn();\n        for (const entry of contentsMap) {\n          // Randomly edit some files.\n          const path = entry[0];\n          const contents = entry[1];\n          if (Math.random() > 0.5) {\n            analyzer.analyze(path, contents);\n            if (Math.random() > 0.5) {\n              const p = analyzer.analyze(path, contents);\n              const cacheContext = analyzer['_cacheContext'];\n              intermediatePromises.push((async() => {\n                await p;\n                const docs = Array.from(\n                    cacheContext['_cache'].analyzedDocuments.values());\n                assert.isTrue(new Set(docs.map(d => d.url).sort()).has(path));\n              })());\n            }\n          }\n          promises.push(analyzer.analyze('base.html'));\n          await Promise.all(promises);\n        }\n        // Analyze the base file\n        promises.push(analyzer.analyze('base.html'));\n        await Promise.all(promises);\n      }\n      // Assert that all edits went through fine.\n      await Promise.all(intermediatePromises);\n      // Assert that the every analysis of 'base.html' after each batch of edits\n      // was correct, and doesn't have missing or inconsistent results.\n      const documents = await Promise.all(promises);\n      for (const document of documents) {\n        assert.deepEqual(document.url, 'base.html');\n        const localFeatures = document.getFeatures(false);\n        const kinds = Array.from(localFeatures).map(f => Array.from(f.kinds));\n        assert.deepEqual(kinds, [\n          ['document', 'html-document'],\n          ['import', 'html-import'],\n          ['import', 'html-import']\n        ]);\n        const imports = Array.from(document.getByKind('import'));\n        assert.sameMembers(\n            imports.map(m => m.url),\n            ['a.html', 'b.html', 'common.html', 'common.html']);\n        const docs = Array.from(document.getByKind('document'));\n        assert.sameMembers(\n            docs.map(d => d.url),\n            ['a.html', 'b.html', 'base.html', 'common.html']);\n        const refs = Array.from(document.getByKind('element-reference'));\n        assert.sameMembers(refs.map(ref => ref.tagName), ['custom-el']);\n      }\n    };\n\n    test('editor simulator of imports that import a common dep', async() => {\n      const waitTimes: number[] = [];\n      const randomWait = () => new Promise<void>((resolve) => {\n        const waitTime = Math.random() * 30;\n        waitTimes.push(waitTime);\n        setTimeout(resolve, waitTime);\n      });\n      try {\n        await editorSimulator(randomWait);\n      } catch (err) {\n        console.error('Wait times to reproduce this failure:');\n        console.error(JSON.stringify(waitTimes));\n        throw err;\n      }\n    });\n\n    /**\n     * This is a tool for reproducing and debugging a failure of the editor\n     * simulator test above, but only at the exact same commit, as it's\n     * sensitive to the order of internal operations of the analyzer. So this\n     * code with a defined list of wait times should not be checked in.\n     *\n     * It's also worth noting that this code will be dependent on many other\n     * system factors, so it's only somewhat more reproducible, and may not\n     * end\n     * up being very useful. If it isn't, we should delete it.\n     */\n    test.skip('somewhat more reproducable editor simulator', async() => {\n      // Replace waitTimes' value with the array of wait times that's logged\n      // to the console when the random editor test fails.\n      const waitTimes: number[] = [];\n\n      const reproducableWait = () => new Promise<void>((resolve) => {\n        const waitTime = waitTimes.shift();\n        if (waitTime == null) {\n          throw new Error(\n              'Was asked for more random waits than the ' +\n              'given array of wait times');\n        }\n        setTimeout(resolve, waitTime);\n      });\n      await editorSimulator(reproducableWait);\n    });\n\n    suite('deterministic tests', () => {\n      // Deterministic tests extracted from various failures of the above\n      // random\n      // test.\n\n      /**\n       * This is an asynchronous keyed queue, useful for controlling the order\n       * of results in order to make tests more deterministic.\n       *\n       * It's intended to be used in fake loaders, scanners, etc, where the\n       * test\n       * provides the intended result on a file by file basis, with control\n       * over\n       * the order in which the results come in.\n       */\n      class KeyedQueue<Key, Result> {\n        private _requests = new Map<Key, Deferred<Result>[]>();\n        private _results = new Map<Key, Result[]>();\n\n        async request(key: Key): Promise<Result> {\n          const results = this._results.get(key) || [];\n          if (results.length > 0) {\n            return results.shift()!;\n          }\n          const deferred = new Deferred<Result>();\n          const deferreds = this._requests.get(key) || [];\n          this._requests.set(key, deferreds);\n          deferreds.push(deferred);\n          return deferred.promise;\n        }\n\n        /**\n         * Resolves the next unfulfilled request for the given key with the\n         * given value.\n         */\n        resolve(key: Key, value: Result) {\n          const requests = this._requests.get(key) || [];\n          if (requests.length > 0) {\n            const request = requests.shift()!;\n            request.resolve(value);\n            return;\n          }\n          const results = this._results.get(key) || [];\n          this._results.set(key, results);\n          results.push(value);\n        }\n\n        toString() {\n          return JSON.stringify({\n            openRequests: Array.from(this._requests.keys()),\n            openResponses: Array.from(this._results.keys())\n          });\n        }\n      }\n\n      class DeterministicUrlLoader implements UrlLoader {\n        queue = new KeyedQueue<string, string>();\n        canLoad(_url: string) {\n          return true;\n        }\n\n        async load(url: string) {\n          return this.queue.request(url);\n        }\n      }\n\n      class NoopUrlLoader implements UrlLoader {\n        canLoad() {\n          return true;\n        }\n        async load(): Promise<string> {\n          throw new Error(\n              `Noop Url Loader isn't supposed to be actually called.`);\n        }\n      }\n\n      /**\n       * This crashed the analyzer as there was a race to _makeDocument,\n       * violating its constraint that there not already be a resolved\n       * Document\n       * for a given path.\n       *\n       * This test came out of debugging this issue:\n       *     https://github.com/Polymer/polymer-analyzer/issues/406\n       */\n      test('two edits of the same file back to back', async() => {\n        const analyzer = new Analyzer({urlLoader: new NoopUrlLoader()});\n        await Promise.all([\n          analyzer.analyze('leaf.html', 'Hello'),\n          analyzer.analyze('leaf.html', 'World')\n        ]);\n      });\n\n      test.skip('something about the order of scanning?', async() => {\n        // TODO(rictic): test out more analysis race conditions in a\n        //     deterministic fashion.\n        const urlLoader = new DeterministicUrlLoader();\n        const analyzer = new Analyzer({urlLoader});\n        const promises = [];\n        promises.push(analyzer.analyze(\n            'a.html', '<link rel=\"import\" href=\"common.html\">'));\n        promises.push(analyzer.analyze(\n            'b.html', '<link rel=\"import\" href=\"common.html\">'));\n        promises.push(analyzer.analyze('base.html', `\n<link rel=\"import\" href=\"a.html\">\n<link rel=\"import\" href=\"b.html\">\n`));\n\n        urlLoader.queue.resolve('common.html', '');\n        urlLoader.queue.resolve('common.html', '');\n        await Promise.all(promises);\n      });\n\n      test('analyzes multiple imports of the same behavior', async() => {\n        const documentA = await analyzer.analyze(\n            'static/multiple-behavior-imports/element-a.html');\n        const documentB = await analyzer.analyze(\n            'static/multiple-behavior-imports/element-b.html');\n        assert.deepEqual(documentA.getWarnings(true), []);\n        assert.deepEqual(documentB.getWarnings(true), []);\n      });\n\n      test(\n          'analyzes multiple imports of the same behavior simultaneously',\n          async() => {\n            const result = await Promise.all([\n              analyzer.analyze(\n                  'static/multiple-behavior-imports/element-a.html'),\n              analyzer.analyze(\n                  'static/multiple-behavior-imports/element-b.html')\n            ]);\n            const documentA = result[0];\n            const documentB = result[1];\n            assert.deepEqual(documentA.getWarnings(true), []);\n            assert.deepEqual(documentB.getWarnings(true), []);\n          });\n    });\n  });\n});\n"]}