{"version":3,"sources":["test/perf/telemetry_test.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAEH,+BAA4B;AAE5B,oDAAsD;AAEtD,KAAK,CAAC,kBAAkB,EAAE;IAExB,IAAI,CAAC,kDAAkD,EAAE;QACvD,MAAM,OAAO,GAAG,IAAI,4BAAgB,EAAE,CAAC;QACvC,MAAM,YAAY,GAAG,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;QAC3D,YAAY,EAAE,CAAC;QACf,MAAM,YAAY,GAAG,MAAM,OAAO,CAAC,eAAe,EAAE,CAAC;QACrD,aAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QACjC,MAAM,WAAW,GAAG,YAAY,CAAC,CAAC,CAAE,CAAC;QACrC,aAAM,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;QAChD,aAAM,CAAC,SAAS,CAAC,WAAW,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QACpD,aAAM,CAAC,WAAW,CAAC,WAAW,IAAI,CAAC,CAAC,CAAC;QACrC,aAAM,CAAC,WAAW,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC;IACxC,CAAC,CAAA,CAAC,CAAC;IAEH,IAAI,CAAC,oDAAoD,EAAE;QACzD,MAAM,OAAO,GAAG,IAAI,4BAAgB,EAAE,CAAC;QACvC,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,KAAK,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;QACjE,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;QAC/C,MAAM,YAAY,GAAG,MAAM,OAAO,CAAC,eAAe,EAAE,CAAC;QACrD,aAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QACjC,MAAM,WAAW,GAAG,YAAY,CAAC,CAAC,CAAE,CAAC;QACrC,aAAM,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;QAChD,aAAM,CAAC,SAAS,CAAC,WAAW,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QACpD,aAAM,CAAC,WAAW,CAAC,WAAW,IAAI,CAAC,CAAC,CAAC;QACrC,aAAM,CAAC,WAAW,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC;IACxC,CAAC,CAAA,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","file":"telemetry_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\n\nimport {TelemetryTracker} from '../../perf/telemetry';\n\nsuite('TelemetryTracker', function() {\n\n  test('it can track the performance of synchronous code', async() => {\n    const tracker = new TelemetryTracker();\n    const doneTracking = tracker.start('test-kind', 'test-id');\n    doneTracking();\n    const measurements = await tracker.getMeasurements();\n    assert.lengthOf(measurements, 1);\n    const measurement = measurements[0]!;\n    assert.deepEqual(measurement.kind, 'test-kind');\n    assert.deepEqual(measurement.identifier, 'test-id');\n    assert(measurement.elapsedTime >= 0);\n    assert(measurement.elapsedTime <= 10);\n  });\n\n  test('it can track the performance of async code.. kinda', async() => {\n    const tracker = new TelemetryTracker();\n    const promise = new Promise((resolve) => setTimeout(resolve, 0));\n    tracker.track(promise, 'test-kind', 'test-id');\n    const measurements = await tracker.getMeasurements();\n    assert.lengthOf(measurements, 1);\n    const measurement = measurements[0]!;\n    assert.deepEqual(measurement.kind, 'test-kind');\n    assert.deepEqual(measurement.identifier, 'test-id');\n    assert(measurement.elapsedTime >= 0);\n    assert(measurement.elapsedTime <= 10);\n  });\n\n});\n"]}