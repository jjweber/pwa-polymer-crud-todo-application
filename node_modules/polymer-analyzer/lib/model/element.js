/**
 * @license
 * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
"use strict";
class ScannedElement {
    constructor() {
        this.properties = [];
        this.attributes = [];
        this.description = '';
        this.demos = [];
        this.events = [];
        this.warnings = [];
        this.slots = [];
    }
    applyHtmlComment(commentText) {
        this.description = this.description || commentText || '';
    }
    resolve(_document) {
        const element = new Element();
        Object.assign(element, this);
        return element;
    }
}
exports.ScannedElement = ScannedElement;
class Slot {
    constructor(name, range) {
        this.name = name;
        this.range = range;
    }
}
exports.Slot = Slot;
class Element {
    constructor() {
        this.properties = [];
        this.attributes = [];
        this.description = '';
        this.demos = [];
        this.events = [];
        this.kinds = new Set(['element']);
        this.warnings = [];
        this.slots = [];
    }
    get identifiers() {
        const result = new Set();
        if (this.tagName) {
            result.add(this.tagName);
        }
        if (this.className) {
            result.add(this.className);
        }
        return result;
    }
    emitMetadata() {
        return {};
    }
    emitAttributeMetadata(_attribute) {
        return {};
    }
    emitPropertyMetadata(_property) {
        return {};
    }
    emitEventMetadata(_event) {
        return {};
    }
}
exports.Element = Element;

//# sourceMappingURL=element.js.map
