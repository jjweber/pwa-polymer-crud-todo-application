/**
 * @license
 * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const now = require("performance-now");
class TelemetryTracker {
    constructor() {
        this._measurements = [];
        this._promises = [];
    }
    getMeasurements() {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all(this._promises);
            return this._measurements;
        });
    }
    /**
     * Less useful than it seems, because the time between promise creation and
     * the promise settling isn't just work related to the promise. e.g. if you
     * begin loading a remote file, but then get stuck parsing hydrolysis.js then
     * you're going to be charged both for the loading and the parsing time,
     * because the parsing doesn't get interrupted when the loading completes.
     */
    track(promise, kind, identifier) {
        return __awaiter(this, void 0, void 0, function* () {
            const track = this._track(promise, kind, identifier);
            this._promises.push(track);
        });
    }
    _track(promise, kind, identifier) {
        return __awaiter(this, void 0, void 0, function* () {
            const start = now();
            try {
                yield promise;
            }
            catch (_) {
            }
            const elapsed = now() - start;
            this._measurements.push({ elapsedTime: elapsed, kind, identifier });
        });
    }
    start(kind, identifier) {
        let resolve = () => undefined;
        const promise = new Promise((r) => {
            resolve = r;
        });
        this.track(promise, kind, identifier);
        return resolve;
    }
}
exports.TelemetryTracker = TelemetryTracker;

//# sourceMappingURL=telemetry.js.map
