{"version":3,"sources":["test/core/dependency-graph_test.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAEH,+BAA4B;AAC5B,6BAA6B;AAE7B,6CAAwC;AACxC,kEAA4D;AAC5D,kEAA2D;AAE3D,KAAK,CAAC,iBAAiB,EAAE;IACvB,+BACI,MAAmB,EAAE,QAA0B,EAAE,OAAgB;QACnE,aAAM,CAAC,SAAS,CACZ,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;IACvE,CAAC;IACD,IAAI,CAAC,0BAA0B,EAAE;QAC/B,4DAA4D;QAC5D,qCAAqC;QACrC,qCAAqC;QACrC,IAAI,KAAK,GAAG,IAAI,kCAAe,EAAE,CAAC;QAClC,qBAAqB,CAAC,KAAK,CAAC,kBAAkB,CAAC,aAAa,CAAC,EAAE,EAAE,CAAC,CAAC;QACnE,KAAK,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;QACnD,qBAAqB,CAAC,KAAK,CAAC,kBAAkB,CAAC,aAAa,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC3E,KAAK,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;QACnD,qBAAqB,CACjB,KAAK,CAAC,kBAAkB,CAAC,aAAa,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;QACnE,KAAK,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;QAC3D,qBAAqB,CACjB,KAAK,CAAC,kBAAkB,CAAC,aAAa,CAAC,EACvC,CAAC,QAAQ,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC,CAAC;QACvC,KAAK,GAAG,KAAK,CAAC,eAAe,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC1C,qBAAqB,CACjB,KAAK,CAAC,kBAAkB,CAAC,aAAa,CAAC,EAAE,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC,CAAC;QACtE,KAAK,GAAG,KAAK,CAAC,eAAe,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC1C,qBAAqB,CAAC,KAAK,CAAC,kBAAkB,CAAC,aAAa,CAAC,EAAE,EAAE,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;IAEH;;;;OAIG;IACH,KAAK,CAAC,yBAAyB,EAAE;QAC/B,IAAI,QAAkB,CAAC;QACvB,KAAK,CAAC;YACJ,QAAQ,GAAG,IAAI,mBAAQ,CACnB,EAAC,SAAS,EAAE,IAAI,2BAAW,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,EAAC,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;QAEH,2BAA2B,IAAY,EAAE,kBAA4B;YACnE,qBAAqB,CACjB,QAAQ,CAAC,eAAe,CAAC,CAAC,QAAQ,CAAC,CAAC,iBAAiB,CAAC;iBACjD,kBAAkB,CAAC,IAAI,CAAC,EAC7B,kBAAkB,CAAC,CAAC;QAC1B,CAAC;QAED,IAAI,CAAC,kDAAkD,EAAE;YACvD,MAAM,QAAQ,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;YACjD,iBAAiB,CAAC,wBAAwB,EAAE,EAAE,CAAC,CAAC;QAClD,CAAC,CAAA,CAAC,CAAC;QAEH,IAAI,CAAC,0CAA0C,EAAE;YAC/C,MAAM,QAAQ,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;YACjD,iBAAiB,CAAC,wBAAwB,EAAE,EAAE,CAAC,CAAC;YAEhD,iBAAiB,CAAC,wBAAwB,EAAE,CAAC,wBAAwB,CAAC,CAAC,CAAC;YACxE,iBAAiB,CAAC,+CAA+C,EAAE;gBACjE,uCAAuC;gBACvC,sCAAsC;gBACtC,wBAAwB;aACzB,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"dependency-graph_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\nimport * as path from 'path';\n\nimport {Analyzer} from '../../analyzer';\nimport {DependencyGraph} from '../../core/dependency-graph';\nimport {FSUrlLoader} from '../../url-loader/fs-url-loader';\n\nsuite('DependencyGraph', () => {\n  function assertStringSetsEqual(\n      actual: Set<string>, expected: Iterable<string>, message?: string) {\n    assert.deepEqual(\n        Array.from(actual).sort(), Array.from(expected).sort(), message);\n  }\n  test('can calculate dependants', () => {\n    // Testing building up and then tearing back down the graph:\n    // base.html -> a.html -> common.html\n    // base.html -> b.html -> common.html\n    let graph = new DependencyGraph();\n    assertStringSetsEqual(graph.getAllDependantsOf('common.html'), []);\n    graph.addDependenciesOf('a.html', ['common.html']);\n    assertStringSetsEqual(graph.getAllDependantsOf('common.html'), ['a.html']);\n    graph.addDependenciesOf('b.html', ['common.html']);\n    assertStringSetsEqual(\n        graph.getAllDependantsOf('common.html'), ['a.html', 'b.html']);\n    graph.addDependenciesOf('base.html', ['a.html', 'b.html']);\n    assertStringSetsEqual(\n        graph.getAllDependantsOf('common.html'),\n        ['a.html', 'b.html', 'base.html']);\n    graph = graph.invalidatePaths(['a.html']);\n    assertStringSetsEqual(\n        graph.getAllDependantsOf('common.html'), ['b.html', 'base.html']);\n    graph = graph.invalidatePaths(['b.html']);\n    assertStringSetsEqual(graph.getAllDependantsOf('common.html'), []);\n  });\n\n  /**\n   * Like many integration tests this is a bit dirty, but it catches many\n   * interesting bugs in the way that we construct the dependency graph in\n   * practice.\n   */\n  suite('as used in the Analyzer', () => {\n    let analyzer: Analyzer;\n    setup(() => {\n      analyzer = new Analyzer(\n          {urlLoader: new FSUrlLoader(path.join(__dirname, '..', 'static'))});\n    });\n\n    function assertImportersOf(path: string, expectedDependants: string[]) {\n      assertStringSetsEqual(\n          analyzer['_cacheContext']['_cache']['dependencyGraph']\n              .getAllDependantsOf(path),\n          expectedDependants);\n    }\n\n    test('works with a basic document with no dependencies', async() => {\n      await analyzer.analyze('dependencies/leaf.html');\n      assertImportersOf('dependencies/leaf.html', []);\n    });\n\n    test('works with a simple tree of dependencies', async() => {\n      await analyzer.analyze('dependencies/root.html');\n      assertImportersOf('dependencies/root.html', []);\n\n      assertImportersOf('dependencies/leaf.html', ['dependencies/root.html']);\n      assertImportersOf('dependencies/subfolder/subfolder-sibling.html', [\n        'dependencies/subfolder/in-folder.html',\n        'dependencies/inline-and-imports.html',\n        'dependencies/root.html'\n      ]);\n    });\n  });\n});\n"]}