{"version":3,"sources":["url-loader/fs-url-loader.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;;AAEH,yBAAyB;AACzB,gCAAgC;AAChC,6BAA2C;AAM3C;;GAEG;AACH;IAGE,YAAY,IAAa;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED,OAAO,CAAC,GAAW;QACjB,IAAI,SAAS,GAAG,WAAQ,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAI,QAAQ,GACR,OAAO,CAAC,SAAS,CAAC,kBAAkB,CAAC,SAAS,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,CAAC;QACpE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IAC5C,CAAC;IAED,QAAQ,CAAC,SAAc,EAAE,QAAgB;QACvC,MAAM,CAAC,CAAC,SAAS,CAAC,QAAQ,KAAK,MAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;YACzD,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IAED,IAAI,CAAC,GAAW;QACd,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;YACjC,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACrC,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,EAAE,CAAC,KAAY,EAAE,QAAgB;gBAC3D,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACV,MAAM,CAAC,KAAK,CAAC,CAAC;gBAChB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,OAAO,CAAC,QAAQ,CAAC,CAAC;gBACpB,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,WAAW,CAAC,GAAW;QACrB,IAAI,SAAS,GAAG,WAAQ,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAI,QAAQ,GACR,OAAO,CAAC,SAAS,CAAC,kBAAkB,CAAC,SAAS,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,CAAC;QACpE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;YACxC,MAAM,IAAI,KAAK,CAAC,eAAe,GAAG,EAAE,CAAC,CAAC;QACxC,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC;IAClE,CAAC;CACF;AAzCD,kCAyCC;AAAA,CAAC","file":"fs-url-loader.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as fs from 'fs';\nimport * as pathlib from 'path';\nimport {parse as parseUrl, Url} from 'url';\n\nimport {UrlLoader} from './url-loader';\n\n\n\n/**\n * Resolves requests via the file system.\n */\nexport class FSUrlLoader implements UrlLoader {\n  root: string|undefined;\n\n  constructor(root?: string) {\n    this.root = root;\n  }\n\n  canLoad(url: string): boolean {\n    let urlObject = parseUrl(url);\n    let pathname =\n        pathlib.normalize(decodeURIComponent(urlObject.pathname || ''));\n    return this._isValid(urlObject, pathname);\n  }\n\n  _isValid(urlObject: Url, pathname: string) {\n    return (urlObject.protocol === 'file' || !urlObject.hostname) &&\n        !pathname.startsWith('../');\n  }\n\n  load(url: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      let filepath = this.getFilePath(url);\n      fs.readFile(filepath, 'utf8', (error: Error, contents: string) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(contents);\n        }\n      });\n    });\n  }\n\n  getFilePath(url: string): string {\n    let urlObject = parseUrl(url);\n    let pathname =\n        pathlib.normalize(decodeURIComponent(urlObject.pathname || ''));\n    if (!this._isValid(urlObject, pathname)) {\n      throw new Error(`Invalid URL ${url}`);\n    }\n    return this.root ? pathlib.join(this.root, pathname) : pathname;\n  }\n};\n"]}