/**
 * @license
 * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
"use strict";
const espree = require("espree");
const model_1 = require("../model/model");
const warning_1 = require("../warning/warning");
const javascript_document_1 = require("./javascript-document");
class JavaScriptParser {
    constructor(options) {
        console.assert(options != null);
        console.assert(options.sourceType != null);
        this.sourceType = options.sourceType;
    }
    parse(contents, url, inlineInfo) {
        const isInline = !!inlineInfo;
        inlineInfo = inlineInfo || {};
        let ast;
        try {
            ast = espree.parse(contents, {
                ecmaVersion: 8,
                attachComment: true,
                comment: true,
                loc: true,
                sourceType: this.sourceType,
            });
        }
        catch (err) {
            if (err instanceof SyntaxError) {
                throw new warning_1.WarningCarryingException({
                    message: err.message.split('\n')[0],
                    severity: warning_1.Severity.ERROR,
                    code: 'parse-error',
                    sourceRange: model_1.correctSourceRange({
                        file: url,
                        start: { line: err.lineNumber - 1, column: err.column - 1 },
                        end: { line: err.lineNumber - 1, column: err.column - 1 }
                    }, inlineInfo.locationOffset)
                });
            }
            throw err;
        }
        return new javascript_document_1.JavaScriptDocument({
            url,
            contents,
            ast,
            locationOffset: inlineInfo.locationOffset,
            astNode: inlineInfo.astNode, isInline,
        });
    }
}
exports.JavaScriptParser = JavaScriptParser;

//# sourceMappingURL=javascript-parser.js.map
