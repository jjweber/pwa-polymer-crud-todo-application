/**
 * @license
 * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const chai_1 = require("chai");
const telemetry_1 = require("../../perf/telemetry");
suite('TelemetryTracker', function () {
    test('it can track the performance of synchronous code', () => __awaiter(this, void 0, void 0, function* () {
        const tracker = new telemetry_1.TelemetryTracker();
        const doneTracking = tracker.start('test-kind', 'test-id');
        doneTracking();
        const measurements = yield tracker.getMeasurements();
        chai_1.assert.lengthOf(measurements, 1);
        const measurement = measurements[0];
        chai_1.assert.deepEqual(measurement.kind, 'test-kind');
        chai_1.assert.deepEqual(measurement.identifier, 'test-id');
        chai_1.assert(measurement.elapsedTime >= 0);
        chai_1.assert(measurement.elapsedTime <= 10);
    }));
    test('it can track the performance of async code.. kinda', () => __awaiter(this, void 0, void 0, function* () {
        const tracker = new telemetry_1.TelemetryTracker();
        const promise = new Promise((resolve) => setTimeout(resolve, 0));
        tracker.track(promise, 'test-kind', 'test-id');
        const measurements = yield tracker.getMeasurements();
        chai_1.assert.lengthOf(measurements, 1);
        const measurement = measurements[0];
        chai_1.assert.deepEqual(measurement.kind, 'test-kind');
        chai_1.assert.deepEqual(measurement.identifier, 'test-id');
        chai_1.assert(measurement.elapsedTime >= 0);
        chai_1.assert(measurement.elapsedTime <= 10);
    }));
});

//# sourceMappingURL=telemetry_test.js.map
