{"version":3,"sources":["core/dependency-graph.ts"],"names":[],"mappings":"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","file":"dependency-graph.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * Maintains bidirectional indexes of the dependency graph, for quick querying.\n */\nexport class DependencyGraph {\n  private _dependencies = new Map<string, Set<string>>();\n  private _dependants = new Map<string, Set<string>>();\n\n  constructor(from?: DependencyGraph) {\n    if (!from) {\n      return;\n    }\n    // This is a copy constructor, but we want to make a deep copy of the\n    // other graph, so we need to copy the sets.\n    for (const entry of from._dependencies.entries()) {\n      this._dependencies.set(entry[0], new Set(entry[1]));\n    }\n    for (const entry of from._dependants.entries()) {\n      this._dependants.set(entry[0], new Set(entry[1]));\n    }\n  }\n\n  /**\n   * Add dependencies of the given path.\n   *\n   * @param path The path (i.e. url) of a document.\n   * @param newDependencies The paths of that document's direct dependencies.\n   */\n  addDependenciesOf(path: string, newDependencies: Iterable<string>) {\n    let dependencies = this._dependencies.get(path);\n    if (!dependencies) {\n      dependencies = new Set();\n      this._dependencies.set(path, dependencies);\n    }\n    for (const newDependency of newDependencies) {\n      dependencies.add(newDependency);\n      let dependants = this._dependants.get(newDependency);\n      if (!dependants) {\n        dependants = new Set();\n        this._dependants.set(newDependency, dependants);\n      }\n      dependants.add(path);\n    }\n  }\n\n  /**\n   * Returns a fork of this graph without the documents at the given paths.\n   */\n  invalidatePaths(paths: string[]): DependencyGraph {\n    const fork = new DependencyGraph(this);\n    for (const path of paths) {\n      const dependencies = fork._dependencies.get(path);\n      if (!dependencies) {\n        continue;\n      }\n      // Tell the dependencies that `path` is no longer one of their dependants.\n      for (const dependency of dependencies) {\n        let dependants = fork._dependants.get(dependency);\n        if (dependants) {\n          dependants.delete(path);\n        }\n      }\n      fork._dependencies.delete(path);\n    }\n    return fork;\n  }\n\n  /**\n   * Returns the set of transitive dependencies on the given path.\n   *\n   * So if A depends on B which depends on C, then getAllDependentsOf(C) will\n   * be Set([A,B]), and getAllDependantsOf(B) will be Set([A]).\n   */\n  getAllDependantsOf(path: string): Set<string> {\n    const result = new Set();\n    this._getAllDependantsOf(path, new Set(), result);\n    return result;\n  }\n\n  private _getAllDependantsOf(\n      path: string, visited: Set<string>, result: Set<string>): void {\n    if (visited.has(path)) {\n      return;\n    }\n    visited.add(path);\n    const dependants = this._dependants.get(path);\n    if (!dependants) {\n      return;\n    }\n    for (const dependant of dependants) {\n      result.add(dependant);\n      this._getAllDependantsOf(dependant, visited, result);\n    }\n  }\n}\n"]}