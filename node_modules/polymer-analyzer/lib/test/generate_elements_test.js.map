{"version":3,"sources":["test/generate_elements_test.ts"],"names":[],"mappings":"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","file":"generate_elements_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport {Analyzer} from '../analyzer';\nimport {generateElementMetadata, validateElements, ValidationError} from '../generate-elements';\nimport {FSUrlLoader} from '../url-loader/fs-url-loader';\nimport {PackageUrlResolver} from '../url-loader/package-url-resolver';\n\nconst onlyTests = new Set<string>([]);  // Should be empty when not debugging.\n\n// TODO(rictic): work out how we want to handle ignoring elements from other\n//     packages in the world of Document rather than Analysis.\nconst skipTests = new Set<string>(['bower_packages', 'nested-packages']);\n\n\nsuite('elements.json generation', function() {\n  const basedir = path.join(__dirname, 'static', 'analysis');\n  const analysisFixtureDirs = fs.readdirSync(basedir)\n                                  .map(p => path.join(basedir, p))\n                                  .filter(p => fs.statSync(p).isDirectory());\n\n  for (const analysisFixtureDir of analysisFixtureDirs) {\n    // Generate a test from the goldens found in every dir in\n    // src/test/static/analysis/\n    const testBaseName = path.basename(analysisFixtureDir);\n    const testDefiner = onlyTests.has(testBaseName) ?\n        test.only :\n        skipTests.has(testBaseName) ? test.skip : test;\n    const testName = `produces a correct elements.json ` +\n        `for fixture dir \\`${testBaseName}\\``;\n\n    testDefiner(testName, async function() {\n      // Test body here:\n      const elements = await analyzeDir(analysisFixtureDir);\n\n      const packages = new Set<string>(mapI(\n          filterI(\n              walkRecursively(analysisFixtureDir),\n              (p) => p.endsWith('bower.json') || p.endsWith('package.json')),\n          (p) => path.dirname(p)));\n      if (packages.size === 0) {\n        packages.add(analysisFixtureDir);\n      }\n      for (const packagePath of packages) {\n        const pathToGolden = path.join(packagePath || '', 'elements.json');\n        const renormedPackagePath = packagePath ?\n            packagePath.substring(analysisFixtureDir.length + 1) :\n            packagePath;\n        const analyzedPackages =\n            generateElementMetadata(elements, renormedPackagePath);\n        validateElements(analyzedPackages);\n\n        try {\n          assert.deepEqual(\n              analyzedPackages,\n              JSON.parse(fs.readFileSync(pathToGolden, 'utf-8')),\n              `Generated form of ${path.relative(__dirname, pathToGolden)} ` +\n                  `differs from the golden at that path`);\n        } catch (e) {\n          console.log(\n              `Expected contents of ${pathToGolden}:\\n` +\n              `${JSON.stringify(analyzedPackages, null, 2)}`);\n          throw e;\n        }\n      }\n    });\n  }\n\n  test('throws when validating valid elements.json', function() {\n    try {\n      validateElements(<any>{});\n    } catch (err) {\n      assert.instanceOf(err, ValidationError);\n      let valError: ValidationError = err;\n      assert(valError.errors.length > 0);\n      assert.include(valError.message, `requires property \"elements\"`);\n      return;\n    }\n    throw new Error('expected Analysis validation to fail!');\n  });\n\n  test(`doesn't throw when validating a valid elements.json`, function() {\n    validateElements({elements: [], schema_version: '1.0.0'});\n  });\n\n  test(`doesn't throw when validating a version from the future`, function() {\n    validateElements(\n        <any>{elements: [], schema_version: '1.0.1', new_field: 'stuff here'});\n  });\n\n  test(`throws when validating a bad version`, function() {\n    try {\n      validateElements(<any>{\n        elements: [],\n        schema_version: '5.1.1',\n        new_field: 'stuff here'\n      });\n    } catch (e) {\n      assert.include(e.message, 'Invalid schema_version in AnalyzedPackage');\n      return;\n    }\n    throw new Error('expected Analysis validation to fail!');\n  });\n\n});\n\nfunction* filterI<T>(it: Iterable<T>, pred: (t: T) => boolean): Iterable<T> {\n  for (const inst of it) {\n    if (pred(inst)) {\n      yield inst;\n    }\n  }\n}\n\nfunction* mapI<T, U>(it: Iterable<T>, trans: (t: T) => U): Iterable<U> {\n  for (const inst of it) {\n    yield trans(inst);\n  }\n}\n\nfunction* walkRecursively(dir: string): Iterable<string> {\n  for (const filename of fs.readdirSync(dir)) {\n    const fullPath = path.join(dir, filename);\n    if (fs.statSync(fullPath).isDirectory()) {\n      for (const f of walkRecursively(fullPath)) {\n        yield f;\n      }\n    } else {\n      yield fullPath;\n    }\n  }\n}\n\nasync function analyzeDir(baseDir: string) {\n  const analyzer = new Analyzer({\n    urlLoader: new FSUrlLoader(baseDir),\n    urlResolver: new PackageUrlResolver(),\n  });\n  let importStatements =\n      Array.from(filterI(walkRecursively(baseDir), (f) => f.endsWith('.html')))\n          .map(\n              fn => `<link rel=\"import\" href=\"${path.relative(baseDir, fn)}\">`);\n  const document = await analyzer.analyze(\n      path.join('ephemeral.html'), importStatements.join('\\n'));\n  return Array.from(document.getByKind('element'));\n}\n"]}