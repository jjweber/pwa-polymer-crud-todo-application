{"version":3,"sources":["polymer/polymer-element.ts"],"names":[],"mappings":"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","file":"polymer-element.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as dom5 from 'dom5';\nimport * as estree from 'estree';\n\nimport * as jsdoc from '../javascript/jsdoc';\nimport {Document, Element, LiteralValue, Property, ScannedAttribute, ScannedElement, ScannedEvent, ScannedProperty, SourceRange} from '../model/model';\nimport {Severity, Warning} from '../warning/warning';\n\nimport {Behavior, ScannedBehaviorAssignment} from './behavior';\n\nexport interface BasePolymerProperty {\n  published?: boolean;\n  notify?: boolean;\n  observer?: string;\n  observerNode?: estree.Expression|estree.Pattern;\n  reflectToAttribute?: boolean;\n  configuration?: boolean;\n  getter?: boolean;\n  setter?: boolean;\n  function?: boolean;\n}\n\nexport interface ScannedPolymerProperty extends ScannedProperty,\n                                                BasePolymerProperty {}\nexport interface PolymerProperty extends Property, BasePolymerProperty {}\n\nexport interface ScannedFunction extends ScannedPolymerProperty {\n  function: boolean;  // true\n  params: {name: string, type?: string}[];\n  return: {type: string | null; desc: string};\n}\n\nexport function isScannedFunction(d: ScannedProperty): d is ScannedFunction {\n  return d['function'] === true;\n}\n\nexport interface Options {\n  tagName?: string;\n  className?: string;\n  superClass?: string;\n  extends?: string;\n  jsdoc?: jsdoc.Annotation;\n  description?: string;\n  properties?: ScannedProperty[];\n  attributes?: ScannedAttribute[];\n  observers?: {\n    javascriptNode: estree.Expression | estree.SpreadElement,\n    expression: LiteralValue\n  }[];\n  listeners?: {\n    event: string,\n    handler: string\n  }[];\n  behaviors?: ScannedBehaviorAssignment[];\n\n  demos?: {desc: string; path: string}[];\n  events?: ScannedEvent[];\n\n  abstract?: boolean;\n  sourceRange: SourceRange|undefined;\n}\n\n/**\n * The metadata for a single polymer element\n */\nexport class ScannedPolymerElement extends ScannedElement {\n  properties: ScannedPolymerProperty[] = [];\n  observers: {\n    javascriptNode: estree.Expression | estree.SpreadElement,\n    expression: LiteralValue\n  }[] = [];\n  listeners: {\n    event: string,\n    handler: string\n  }[] = [];\n  behaviorAssignments: ScannedBehaviorAssignment[] = [];\n  // FIXME(rictic): domModule and scriptElement aren't known at a file local\n  //     level. Remove them here, they should only exist on PolymerElement.\n  domModule?: dom5.Node;\n  scriptElement?: dom5.Node;\n  // Indicates if an element is a pseudo element\n  pseudo: boolean = false;\n\n  abstract?: boolean;\n\n  constructor(options: Options) {\n    super();\n    // TODO(justinfagnani): fix this constructor to not be crazy, or remove\n    // class altogether.\n    const optionsCopy = Object.assign({}, options);\n    delete optionsCopy.properties;\n    Object.assign(this, optionsCopy);\n    if (options.properties) {\n      options.properties.forEach((p) => this.addProperty(p));\n    }\n  }\n\n  addProperty(prop: ScannedPolymerProperty) {\n    if (prop.name.startsWith('_') || prop.name.endsWith('_')) {\n      prop.private = true;\n    }\n    this.properties.push(prop);\n    const attributeName = propertyToAttributeName(prop.name);\n    if (prop.private || !attributeName || !prop.published) {\n      return;\n    }\n    if (!isScannedFunction(prop)) {\n      this.attributes.push({\n        name: attributeName,\n        sourceRange: prop.sourceRange,\n        description: prop.description,\n        type: prop.type,\n        changeEvent: prop.notify ? `${attributeName}-changed` : undefined\n      });\n    }\n    if (prop.notify) {\n      this.events.push({\n        name: `${attributeName}-changed`,\n        description: `Fired when the \\`${prop.name}\\` property changes.`,\n        sourceRange: prop.sourceRange,\n        astNode: prop.astNode,\n        warnings: []\n      });\n    }\n  }\n\n  resolve(document: Document): PolymerElement {\n    return resolveElement(this, document);\n  }\n}\n\nexport class PolymerElement extends Element {\n  properties: PolymerProperty[];\n\n  observers: {\n    javascriptNode: estree.Expression | estree.SpreadElement,\n    expression: LiteralValue\n  }[];\n  listeners: {\n    event: string,\n    handler: string\n  }[];\n  behaviorAssignments: ScannedBehaviorAssignment[];\n  domModule?: dom5.Node;\n  scriptElement?: dom5.Node;\n\n  abstract?: boolean;\n\n  constructor() {\n    super();\n    this.kinds = new Set(['element', 'polymer-element']);\n    this.behaviorAssignments = [];\n  }\n\n  emitPropertyMetadata(property: PolymerProperty) {\n    const polymerMetadata: any = {};\n    const polymerMetadataFields = ['notify', 'observer', 'readOnly'];\n    for (const field of polymerMetadataFields) {\n      if (field in property) {\n        polymerMetadata[field] = property[field];\n      }\n    }\n    return {polymer: polymerMetadata};\n  }\n}\n\n/**\n * Implements Polymer core's translation of property names to attribute names.\n *\n * Returns null if the property name cannot be so converted.\n */\nfunction propertyToAttributeName(propertyName: string): string|null {\n  // Polymer core will not map a property name that starts with an uppercase\n  // character onto an attribute.\n  if (propertyName[0].toUpperCase() === propertyName[0]) {\n    return null;\n  }\n  return propertyName.replace(\n      /([A-Z])/g, (_: string, c1: string) => `-${c1.toLowerCase()}`);\n}\n\nfunction resolveElement(\n    scannedElement: ScannedPolymerElement, document: Document): PolymerElement {\n  // TODO: Copy over all properties better. Maybe exclude known properties not\n  //   copied?\n  const clone: PolymerElement =\n      Object.assign(new PolymerElement(), scannedElement);\n\n  const flatteningResult = getFlattenedAndResolvedBehaviors(\n      scannedElement.behaviorAssignments, document);\n\n  // This has the combined effects of copying the array of warnings from the\n  // ScannedElement, and adding in any new ones found when resolving behaviors.\n  clone.warnings = clone.warnings.concat(flatteningResult.warnings);\n\n  const behaviors = Array.from(flatteningResult.resolvedBehaviors);\n  clone.properties = mergeByName(\n      scannedElement.properties,\n      behaviors.map(b => ({name: b.className, vals: b.properties})));\n  clone.attributes = mergeByName(\n      scannedElement.attributes,\n      behaviors.map(b => ({name: b.className, vals: b.attributes})));\n  clone.events = mergeByName(\n      scannedElement.events,\n      behaviors.map(b => ({name: b.className, vals: b.events})));\n\n  const domModule =\n      document.getOnlyAtId('dom-module', scannedElement.tagName || '');\n  if (domModule) {\n    clone.description = scannedElement.description || domModule.comment || '';\n    clone.domModule = domModule.node;\n    clone.slots = domModule.slots.slice();\n  }\n\n  if (scannedElement.pseudo) {\n    clone.kinds.add('pseudo-element');\n  }\n\n  return clone;\n}\n\nexport function getFlattenedAndResolvedBehaviors(\n    behaviorAssignments: ScannedBehaviorAssignment[], document: Document) {\n  const resolvedBehaviors = new Set<Behavior>();\n  const warnings = _getFlattenedAndResolvedBehaviors(\n      behaviorAssignments, document, resolvedBehaviors);\n  return {resolvedBehaviors, warnings};\n}\n\nfunction _getFlattenedAndResolvedBehaviors(\n    behaviorAssignments: ScannedBehaviorAssignment[],\n    document: Document,\n    resolvedBehaviors: Set<Behavior>) {\n  const warnings: Warning[] = [];\n  for (const behavior of behaviorAssignments) {\n    const foundBehaviors = document.getById('behavior', behavior.name);\n    if (foundBehaviors.size === 0) {\n      warnings.push({\n        message: `Unable to resolve behavior ` +\n            `\\`${behavior.name}\\`. Did you import it? Is it annotated with ` +\n            `@polymerBehavior?`,\n        severity: Severity.ERROR,\n        code: 'unknown-polymer-behavior',\n        sourceRange: behavior.sourceRange\n      });\n      // Skip processing this behavior.\n      continue;\n    }\n    if (foundBehaviors.size > 1) {\n      warnings.push({\n        message: `Found more than one behavior named ${behavior.name}.`,\n        severity: Severity.WARNING,\n        code: 'multiple-polymer-behaviors',\n        sourceRange: behavior.sourceRange\n      });\n      // Don't skip processing this behavior, just take the most recently\n      // declared instance.\n    }\n    const foundBehavior = Array.from(foundBehaviors)[foundBehaviors.size - 1];\n    if (resolvedBehaviors.has(foundBehavior)) {\n      continue;\n    }\n    resolvedBehaviors.add(foundBehavior);\n    // Note that we don't care about warnings from transitively resolved\n    // behaviors. Those should become warnings on those behaviors themselves.\n    _getFlattenedAndResolvedBehaviors(\n        foundBehavior.behaviorAssignments, document, resolvedBehaviors);\n  }\n  return warnings;\n}\n\ninterface PropertyOrSimilar {\n  name: string;\n  inheritedFrom?: string;\n}\ninterface HasName {\n  name: string;\n}\nfunction mergeByName<Prop extends PropertyOrSimilar>(\n    base: Prop[], inheritFrom: {name: string, vals: HasName[]}[]): Prop[] {\n  const byName = new Map<string, Prop>();\n  for (const initial of base) {\n    byName.set(initial.name, initial);\n  }\n  for (const source of inheritFrom) {\n    for (const item of source.vals) {\n      if (!byName.has(item.name)) {\n        const copy = <Prop><any>Object.assign({}, item);\n        copy.inheritedFrom = source.name;\n        byName.set(copy.name, copy);\n      }\n    }\n  }\n  return Array.from(byName.values());\n}\n"]}