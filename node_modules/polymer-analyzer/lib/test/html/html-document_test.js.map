{"version":3,"sources":["test/html/html-document_test.ts"],"names":[],"mappings":"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","file":"html-document_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\nimport * as dom5 from 'dom5';\nimport * as fs from 'fs';\nimport * as parse5 from 'parse5';\nimport * as path from 'path';\n\nimport {Analyzer} from '../../analyzer';\nimport {ParsedHtmlDocument} from '../../html/html-document';\nimport {HtmlParser} from '../../html/html-parser';\nimport {SourceRange} from '../../model/model';\nimport {FSUrlLoader} from '../../url-loader/fs-url-loader';\nimport {WarningPrinter} from '../../warning/warning-printer';\n\nsuite('ParsedHtmlDocument', () => {\n  const parser: HtmlParser = new HtmlParser();\n  const url = './source-ranges/html-complicated.html';\n  const basedir = path.join(__dirname, '../static/');\n  const file = fs.readFileSync(path.join(basedir, `${url}`), 'utf8');\n  const document: ParsedHtmlDocument = parser.parse(file, url);\n  const analyzer = new Analyzer({urlLoader: new FSUrlLoader(basedir)});\n  const warningPrinter = new WarningPrinter(null as any, {analyzer});\n\n  const getUnderlinedText = async(range: SourceRange | undefined) => {\n    if (range == null) {\n      return 'No source range produced.';\n    }\n    return '\\n' + await warningPrinter.getUnderlinedText(range);\n  };\n\n  suite('sourceRangeForNode()', () => {\n\n    test('works for comments', async() => {\n      const comments = dom5.nodeWalkAll(\n          document.ast, parse5.treeAdapters.default.isCommentNode);\n\n      assert.equal(comments.length, 2);\n      assert.deepEqual(\n          await getUnderlinedText(document.sourceRangeForNode(comments![0]!)), `\n    <!-- Single Line Comment -->\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~`);\n\n      assert.deepEqual(\n          await getUnderlinedText(document.sourceRangeForNode(comments![1]!)), `\n    <!-- Multiple\n    ~~~~~~~~~~~~~\n         Line\n~~~~~~~~~~~~~\n         Comment -->\n~~~~~~~~~~~~~~~~~~~~`);\n\n    });\n\n    test('works for elements', async() => {\n\n      const liTags =\n          dom5.queryAll(document.ast, dom5.predicates.hasTagName('li'));\n\n      assert.equal(liTags.length, 4);\n\n      assert.deepEqual(\n          await getUnderlinedText(document.sourceRangeForNode(liTags[0]!)), `\n        <li>1\n        ~~~~~\n        <li>2</li>\n~~~~~~~~`);\n\n      assert.deepEqual(\n          await getUnderlinedText(document.sourceRangeForNode(liTags[1]!)), `\n        <li>2</li>\n        ~~~~~~~~~~`);\n\n      assert.deepEqual(\n          await getUnderlinedText(document.sourceRangeForNode(liTags[2]!)), `\n        <li><li>\n        ~~~~`);\n\n      assert.deepEqual(\n          await getUnderlinedText(document.sourceRangeForNode(liTags[3]!)), `\n        <li><li>\n            ~~~~\n      </ul>\n~~~~~~`);\n\n      const pTags =\n          dom5.queryAll(document.ast, dom5.predicates.hasTagName('p'));\n      assert.equal(pTags.length, 2);\n\n      assert.deepEqual(\n          await getUnderlinedText(document.sourceRangeForNode(pTags[0]!)), `\n    <p>\n    ~~~\n      This is a paragraph without a closing tag.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    <p>This is a paragraph with a closing tag.</p>\n~~~~`);\n\n      assert.deepEqual(\n          await getUnderlinedText(document.sourceRangeForNode(pTags[1]!)), `\n    <p>This is a paragraph with a closing tag.</p>\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`);\n    });\n\n    let testName =\n        'works for unclosed tags with attributes and no text content';\n    test(testName, async() => {\n      let url = 'unclosed-tag-attributes.html';\n      const document = parser.parse(await analyzer.load(url), url);\n\n      const tag = dom5.query(document.ast, dom5.predicates.hasTagName('tag'))!;\n      assert.deepEqual(\n          await getUnderlinedText(document.sourceRangeForNode(tag)), `\n<tag attr>\n~~~~~~~~~~`);\n    });\n\n    test('works for void elements', async() => {\n      const linkTags =\n          dom5.queryAll(document.ast, dom5.predicates.hasTagName('link'));\n      assert.equal(linkTags.length, 2);\n\n      assert.deepEqual(\n          await getUnderlinedText(document.sourceRangeForNode(linkTags[0]!)), `\n    <link rel=\"has attributes\">\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~`);\n\n      assert.deepEqual(\n          await getUnderlinedText(document.sourceRangeForNode(linkTags[1]!)), `\n    <link rel=\"multiline ones too\"\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n          foo=bar>\n~~~~~~~~~~~~~~~~~~`);\n    });\n\n    test('works for text nodes', async() => {\n      const titleTag =\n          dom5.query(document.ast, dom5.predicates.hasTagName('title'))!;\n\n      assert.deepEqual(\n          await getUnderlinedText(\n              document.sourceRangeForNode(titleTag!.childNodes![0]!)),\n          `\n    <title>\n           ~\n      This title is a little\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      complicated.\n~~~~~~~~~~~~~~~~~~\n        </title>\n~~~~~~~~`);\n\n      const pTags =\n          dom5.queryAll(document.ast, dom5.predicates.hasTagName('p'));\n      assert.equal(pTags.length, 2);\n\n      assert.deepEqual(\n          await getUnderlinedText(\n              document.sourceRangeForNode(pTags[0]!.childNodes![0]!)),\n          `\n    <p>\n       ~\n      This is a paragraph without a closing tag.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    <p>This is a paragraph with a closing tag.</p>\n~~~~`);\n\n      assert.deepEqual(\n          await getUnderlinedText(\n              document.sourceRangeForNode(pTags[1]!.childNodes![0]!)),\n          `\n    <p>This is a paragraph with a closing tag.</p>\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`);\n    });\n  });\n\n  suite('sourceRangeForStartTag', () => {\n    test('it works for tags with no attributes', async() => {\n      const liTags =\n          dom5.queryAll(document.ast, dom5.predicates.hasTagName('li'));\n\n      assert.deepEqual(\n          await getUnderlinedText(document.sourceRangeForStartTag(liTags[0]!)),\n          `\n        <li>1\n        ~~~~`);\n\n      assert.deepEqual(\n          await getUnderlinedText(document.sourceRangeForStartTag(liTags[1]!)),\n          `\n        <li>2</li>\n        ~~~~`);\n\n      assert.deepEqual(\n          await getUnderlinedText(document.sourceRangeForStartTag(liTags[2]!)),\n          `\n        <li><li>\n        ~~~~`);\n\n      assert.deepEqual(\n          await getUnderlinedText(document.sourceRangeForStartTag(liTags[3]!)),\n          `\n        <li><li>\n            ~~~~`);\n    });\n\n    test('it works for void tags with no attributes', async() => {\n      const brTags =\n          dom5.queryAll(document.ast, dom5.predicates.hasTagName('br'));\n      assert.equal(brTags.length, 1);\n\n      assert.deepEqual(\n          await getUnderlinedText(document.sourceRangeForStartTag(brTags[0]!)),\n          `\n    <br>\n    ~~~~`);\n    });\n\n    test('it works for void tags with attributes', async() => {\n      const linkTags =\n          dom5.queryAll(document.ast, dom5.predicates.hasTagName('link'));\n      assert.equal(linkTags.length, 2);\n\n      assert.deepEqual(\n          await getUnderlinedText(\n              document.sourceRangeForStartTag(linkTags[0]!)),\n          `\n    <link rel=\"has attributes\">\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~`);\n\n      assert.deepEqual(\n          await getUnderlinedText(\n              document.sourceRangeForStartTag(linkTags[1]!)),\n          `\n    <link rel=\"multiline ones too\"\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n          foo=bar>\n~~~~~~~~~~~~~~~~~~`);\n    });\n\n    test('it works for normal elements with attributes', async() => {\n      const h1Tags =\n          dom5.queryAll(document.ast, dom5.predicates.hasTagName('h1'));\n      assert.equal(h1Tags.length, 2);\n\n      assert.deepEqual(\n          await getUnderlinedText(document.sourceRangeForStartTag(h1Tags[1]!)),\n          `\n    <h1 class=\"foo\" id=\"bar\">\n    ~~~~~~~~~~~~~~~~~~~~~~~~~`);\n\n      const complexTags = dom5.queryAll(\n          document.ast, dom5.predicates.hasTagName('complex-tag'));\n      assert.equal(complexTags.length, 1);\n\n      assert.deepEqual(\n          await getUnderlinedText(\n              document.sourceRangeForStartTag(complexTags[0]!)),\n          `\n    <complex-tag boolean-attr\n    ~~~~~~~~~~~~~~~~~~~~~~~~~\n                 string-attr=\"like this\"\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                 multi-line-attr=\"\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                    can go on\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                    for multiple lines\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                \"\n~~~~~~~~~~~~~~~~~\n                whitespace-around-equals\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                =\n~~~~~~~~~~~~~~~~~\n                \"yes this is legal\">\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`);\n    });\n  });\n  suite('sourceRangeForEndTag', () => {\n    test('it works for normal elements', async() => {\n      const h1Tags =\n          dom5.queryAll(document.ast, dom5.predicates.hasTagName('h1'));\n      assert.equal(h1Tags.length, 2);\n\n      assert.deepEqual(\n          await getUnderlinedText(document.sourceRangeForEndTag(h1Tags[1]!)), `\n    </h1>\n    ~~~~~`);\n\n      const complexTags = dom5.queryAll(\n          document.ast, dom5.predicates.hasTagName('complex-tag'));\n      assert.equal(complexTags.length, 1);\n\n      assert.deepEqual(\n          await getUnderlinedText(\n              document.sourceRangeForEndTag(complexTags[0]!)),\n          `\n    </complex-tag\n    ~~~~~~~~~~~~~\n      >\n~~~~~~~`);\n    });\n  });\n\n  suite('sourceRangeForAttribute', () => {\n    const complexTags =\n        dom5.queryAll(document.ast, dom5.predicates.hasTagName('complex-tag'));\n    assert.equal(complexTags.length, 1);\n\n    test('works for boolean attributes', async() => {\n      assert.deepEqual(\n          await getUnderlinedText(document.sourceRangeForAttribute(\n              complexTags[0]!, 'boolean-attr')),\n          `\n    <complex-tag boolean-attr\n                 ~~~~~~~~~~~~`);\n    });\n\n    test('works for one line string attributes', async() => {\n      assert.deepEqual(\n          await getUnderlinedText(\n              document.sourceRangeForAttribute(complexTags[0]!, 'string-attr')),\n          `\n                 string-attr=\"like this\"\n                 ~~~~~~~~~~~~~~~~~~~~~~~`);\n    });\n\n    test('works for multiline string attributes', async() => {\n      assert.deepEqual(\n          await getUnderlinedText(document.sourceRangeForAttribute(\n              complexTags[0]!, 'multi-line-attr')),\n          `\n                 multi-line-attr=\"\n                 ~~~~~~~~~~~~~~~~~\n                    can go on\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                    for multiple lines\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                \"\n~~~~~~~~~~~~~~~~~`);\n    });\n\n    test(\n        'works for attributes with whitespace around the equals sign',\n        async() => {\n          assert.deepEqual(\n              await getUnderlinedText(document.sourceRangeForAttribute(\n                  complexTags[0]!, 'whitespace-around-equals')),\n              `\n                whitespace-around-equals\n                ~~~~~~~~~~~~~~~~~~~~~~~~\n                =\n~~~~~~~~~~~~~~~~~\n                \"yes this is legal\">\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`);\n        });\n\n    suite('for a void element', async() => {\n      test('works for a string attribute', async() => {\n        const linkTags =\n            dom5.queryAll(document.ast, dom5.predicates.hasTagName('link'));\n        assert.equal(linkTags.length, 2);\n\n        assert.deepEqual(\n            await getUnderlinedText(\n                document.sourceRangeForAttribute(linkTags[0]!, 'rel')),\n            `\n    <link rel=\"has attributes\">\n          ~~~~~~~~~~~~~~~~~~~~`);\n\n        assert.deepEqual(\n            await getUnderlinedText(\n                document.sourceRangeForAttribute(linkTags[1]!, 'foo')),\n            `\n          foo=bar>\n          ~~~~~~~`);\n      });\n    });\n  });\n\n  suite('sourceRangeForAttributeName', () => {\n    const complexTags =\n        dom5.queryAll(document.ast, dom5.predicates.hasTagName('complex-tag'));\n    assert.equal(complexTags.length, 1);\n\n    test('works for boolean attributes', async() => {\n      assert.deepEqual(\n          await getUnderlinedText(document.sourceRangeForAttributeName(\n              complexTags[0]!, 'boolean-attr')),\n          `\n    <complex-tag boolean-attr\n                 ~~~~~~~~~~~~`);\n    });\n\n    test('works for one line string attributes', async() => {\n      assert.deepEqual(\n          await getUnderlinedText(document.sourceRangeForAttributeName(\n              complexTags[0]!, 'string-attr')),\n          `\n                 string-attr=\"like this\"\n                 ~~~~~~~~~~~`);\n    });\n\n    test('works for multiline string attributes', async() => {\n      assert.deepEqual(\n          await getUnderlinedText(document.sourceRangeForAttributeName(\n              complexTags[0]!, 'multi-line-attr')),\n          `\n                 multi-line-attr=\"\n                 ~~~~~~~~~~~~~~~`);\n    });\n    test(\n        'works for attributes with whitespace around the equals sign',\n        async() => {\n          assert.deepEqual(\n              await getUnderlinedText(document.sourceRangeForAttributeName(\n                  complexTags[0]!, 'whitespace-around-equals')),\n              `\n                whitespace-around-equals\n                ~~~~~~~~~~~~~~~~~~~~~~~~`);\n        });\n\n    suite('for a void element', async() => {\n      test('works for a string attribute', async() => {\n        const linkTags =\n            dom5.queryAll(document.ast, dom5.predicates.hasTagName('link'));\n        assert.equal(linkTags.length, 2);\n\n        assert.deepEqual(\n            await getUnderlinedText(\n                document.sourceRangeForAttributeName(linkTags[0]!, 'rel')),\n            `\n    <link rel=\"has attributes\">\n          ~~~`);\n\n        assert.deepEqual(\n            await getUnderlinedText(\n                document.sourceRangeForAttributeName(linkTags[1]!, 'foo')),\n            `\n          foo=bar>\n          ~~~`);\n      });\n    });\n  });\n\n  suite('sourceRangeForAttributeValue', () => {\n    const complexTags =\n        dom5.queryAll(document.ast, dom5.predicates.hasTagName('complex-tag'));\n    assert.equal(complexTags.length, 1);\n\n    test('returns undefined for boolean attributes', async() => {\n      assert.deepEqual(\n          document.sourceRangeForAttributeValue(\n              complexTags[0]!, 'boolean-attr'),\n          undefined);\n    });\n\n    test('works for one line string attributes', async() => {\n      assert.deepEqual(\n          await getUnderlinedText(document.sourceRangeForAttributeValue(\n              complexTags[0]!, 'string-attr')),\n          `\n                 string-attr=\"like this\"\n                             ~~~~~~~~~~~`);\n    });\n\n    test('works for multiline string attributes', async() => {\n      assert.deepEqual(\n          await getUnderlinedText(document.sourceRangeForAttributeValue(\n              complexTags[0]!, 'multi-line-attr')),\n          `\n                 multi-line-attr=\"\n                                 ~\n                    can go on\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                    for multiple lines\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                \"\n~~~~~~~~~~~~~~~~~`);\n    });\n\n    test(\n        'works for attributes with whitespace around the equals sign',\n        async() => {\n          assert.deepEqual(\n              await getUnderlinedText(document.sourceRangeForAttributeValue(\n                  complexTags[0]!, 'whitespace-around-equals')),\n              `\n                \"yes this is legal\">\n                ~~~~~~~~~~~~~~~~~~~`);\n        });\n\n    suite('for a void element', async() => {\n      test('works for a string attribute', async() => {\n        const linkTags =\n            dom5.queryAll(document.ast, dom5.predicates.hasTagName('link'));\n        assert.equal(linkTags.length, 2);\n\n        assert.deepEqual(\n            await getUnderlinedText(\n                document.sourceRangeForAttributeValue(linkTags[0]!, 'rel')),\n            `\n    <link rel=\"has attributes\">\n              ~~~~~~~~~~~~~~~~`);\n\n        assert.deepEqual(\n            await getUnderlinedText(\n                document.sourceRangeForAttributeValue(linkTags[1]!, 'foo')),\n            `\n          foo=bar>\n              ~~~`);\n      });\n    });\n  });\n});\n"]}