{"version":3,"sources":["model/element.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;;AAmBH;IAAA;QAKE,eAAU,GAAsB,EAAE,CAAC;QACnC,eAAU,GAAuB,EAAE,CAAC;QACpC,gBAAW,GAAG,EAAE,CAAC;QACjB,UAAK,GAAoC,EAAE,CAAC;QAC5C,WAAM,GAAmB,EAAE,CAAC;QAG5B,aAAQ,GAAc,EAAE,CAAC;QACzB,UAAK,GAAW,EAAE,CAAC;IAarB,CAAC;IATC,gBAAgB,CAAC,WAA6B;QAC5C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,IAAI,WAAW,IAAI,EAAE,CAAC;IAC3D,CAAC;IAED,OAAO,CAAC,SAAmB;QACzB,MAAM,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;QAC9B,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC7B,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;CACF;AA1BD,wCA0BC;AAKD;IAIE,YAAY,IAAY,EAAE,KAAkB;QAC1C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;CACF;AARD,oBAQC;AAED;IAAA;QAKE,eAAU,GAAe,EAAE,CAAC;QAC5B,eAAU,GAAgB,EAAE,CAAC;QAC7B,gBAAW,GAAG,EAAE,CAAC;QACjB,UAAK,GAAoC,EAAE,CAAC;QAC5C,WAAM,GAAY,EAAE,CAAC;QAIrB,UAAK,GAAgB,IAAI,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;QAC1C,aAAQ,GAAc,EAAE,CAAC;QACzB,UAAK,GAAW,EAAE,CAAC;IA2BrB,CAAC;IA1BC,IAAI,WAAW;QACb,MAAM,MAAM,GAAgB,IAAI,GAAG,EAAE,CAAC;QACtC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3B,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC7B,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAED,YAAY;QACV,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IAED,qBAAqB,CAAC,UAAqB;QACzC,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IAED,oBAAoB,CAAC,SAAmB;QACtC,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IAED,iBAAiB,CAAC,MAAa;QAC7B,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;CACF;AA1CD,0BA0CC","file":"element.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as estree from 'estree';\nimport * as jsdoc from '../javascript/jsdoc';\nimport {SourceRange} from '../model/model';\nimport {Warning} from '../warning/warning';\n\nimport {Document, Event, Feature, Property, Resolvable, ScannedEvent, ScannedProperty} from './model';\n\nexport {Visitor} from '../javascript/estree-visitor';\n\nexport interface ScannedAttribute {\n  name: string;\n  sourceRange: SourceRange|undefined;\n  description?: string;\n  type?: string;\n  changeEvent?: string;\n}\n\nexport class ScannedElement implements Resolvable {\n  tagName?: string;\n  className?: string;\n  superClass?: string;\n  extends?: string;\n  properties: ScannedProperty[] = [];\n  attributes: ScannedAttribute[] = [];\n  description = '';\n  demos: {desc?: string; path: string}[] = [];\n  events: ScannedEvent[] = [];\n  sourceRange: SourceRange|undefined;\n  astNode: estree.Node|null;\n  warnings: Warning[] = [];\n  slots: Slot[] = [];\n\n  jsdoc?: jsdoc.Annotation;\n\n  applyHtmlComment(commentText: string|undefined) {\n    this.description = this.description || commentText || '';\n  }\n\n  resolve(_document: Document): Element {\n    const element = new Element();\n    Object.assign(element, this);\n    return element;\n  }\n}\n\n\nexport interface Attribute extends ScannedAttribute { inheritedFrom?: string; }\n\nexport class Slot {\n  name: string;\n  range: SourceRange;\n\n  constructor(name: string, range: SourceRange) {\n    this.name = name;\n    this.range = range;\n  }\n}\n\nexport class Element implements Feature {\n  tagName?: string;\n  className?: string;\n  superClass?: string;\n  extends?: string;\n  properties: Property[] = [];\n  attributes: Attribute[] = [];\n  description = '';\n  demos: {desc?: string; path: string}[] = [];\n  events: Event[] = [];\n  sourceRange: SourceRange;\n  jsdoc?: jsdoc.Annotation;\n  astNode: estree.Node|null;\n  kinds: Set<string> = new Set(['element']);\n  warnings: Warning[] = [];\n  slots: Slot[] = [];\n  get identifiers(): Set<string> {\n    const result: Set<string> = new Set();\n    if (this.tagName) {\n      result.add(this.tagName);\n    }\n    if (this.className) {\n      result.add(this.className);\n    }\n    return result;\n  }\n\n  emitMetadata(): Object {\n    return {};\n  }\n\n  emitAttributeMetadata(_attribute: Attribute): Object {\n    return {};\n  }\n\n  emitPropertyMetadata(_property: Property): Object {\n    return {};\n  }\n\n  emitEventMetadata(_event: Event): Object {\n    return {};\n  }\n}\n"]}