{"version":3,"sources":["polymer/polymer-element-scanner.ts"],"names":[],"mappings":"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","file":"polymer-element-scanner.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as estraverse from 'estraverse';\nimport * as estree from 'estree';\n\nimport * as astValue from '../javascript/ast-value';\nimport {Visitor} from '../javascript/estree-visitor';\nimport * as esutil from '../javascript/esutil';\nimport {JavaScriptDocument} from '../javascript/javascript-document';\nimport {JavaScriptScanner} from '../javascript/javascript-scanner';\nimport {Severity, WarningCarryingException} from '../warning/warning';\n\nimport {declarationPropertyHandlers, PropertyHandlers} from './declaration-property-handlers';\nimport * as docs from './docs';\nimport {toScannedPolymerProperty} from './js-utils';\nimport {ScannedPolymerElement, ScannedPolymerProperty} from './polymer-element';\n\nexport class PolymerElementScanner implements JavaScriptScanner {\n  async scan(\n      document: JavaScriptDocument, visit: (visitor: Visitor) => Promise<void>):\n      Promise<ScannedPolymerElement[]> {\n    const visitor = new ElementVisitor(document);\n    await visit(visitor);\n    return visitor.features;\n  }\n}\n\nclass ElementVisitor implements Visitor {\n  features: ScannedPolymerElement[] = [];\n\n  /**\n   * The element being built during a traversal;\n   */\n  element: ScannedPolymerElement|null = null;\n  propertyHandlers: PropertyHandlers|null = null;\n  classDetected: boolean = false;\n\n  document: JavaScriptDocument;\n  constructor(document: JavaScriptDocument) {\n    this.document = document;\n  }\n\n  enterClassDeclaration(node: estree.ClassDeclaration, _: estree.Node) {\n    this.classDetected = true;\n    this.element = new ScannedPolymerElement({\n      description: esutil.getAttachedComment(node),\n      events: esutil.getEventComments(node),\n      sourceRange: this.document.sourceRangeForNode(node)\n    });\n    this.propertyHandlers =\n        declarationPropertyHandlers(this.element, this.document);\n  }\n\n  leaveClassDeclaration(_: estree.ClassDeclaration, _parent: estree.Node) {\n    this.element!.properties.map((property) => docs.annotate(property));\n    // TODO(justinfagnani): this looks wrong, class definitions can be nested\n    // so a definition in a method in a Polymer() declaration would end the\n    // declaration early. We should track which class induced the current\n    // element and finish the element when leaving _that_ class.\n    this.element = null;\n    this.propertyHandlers = null;\n    this.classDetected = false;\n  }\n\n  enterAssignmentExpression(node: estree.AssignmentExpression, _: estree.Node) {\n    if (!this.element) {\n      return;\n    }\n    const left = <estree.MemberExpression>node.left;\n    if (left && left.object && left.object.type !== 'ThisExpression') {\n      return;\n    }\n    const prop = <estree.Identifier>left.property;\n    if (prop && prop.name && this.propertyHandlers) {\n      const name = prop.name;\n      if (name in this.propertyHandlers) {\n        this.propertyHandlers[name](node.right);\n      }\n    }\n  }\n\n  enterMethodDefinition(node: estree.MethodDefinition, _: estree.Node) {\n    const element = this.element;\n    if (!element) {\n      return;\n    }\n    const prop = <estree.Property>{\n      key: node.key,\n      value: node.value,\n      kind: node.kind,\n      method: true,\n      leadingComments: node.leadingComments,\n      shorthand: false,\n      computed: false,\n      type: 'Property'\n    };\n    const propDesc = docs.annotate(toScannedPolymerProperty(\n        prop, this.document.sourceRangeForNode(prop)!));\n    if (prop && prop.kind === 'get' &&\n        (propDesc.name === 'behaviors' || propDesc.name === 'observers')) {\n      const returnStatement = <estree.ReturnStatement>node.value.body.body[0];\n      const argument = <estree.ArrayExpression>returnStatement.argument;\n      if (propDesc.name === 'behaviors') {\n        argument.elements.forEach((argNode) => {\n          const behaviorName = astValue.getIdentifierName(argNode);\n          if (!behaviorName) {\n            element.warnings.push({\n              code: 'could-not-determine-behavior-name',\n              message:\n                  `Could not determine behavior name from expression of type ${argNode\n                      .type}`,\n              severity: Severity.WARNING,\n              sourceRange: this.document.sourceRangeForNode(argNode)!\n            });\n            return;\n          }\n          element.behaviorAssignments.push({\n            name: behaviorName,\n            sourceRange: this.document.sourceRangeForNode(argNode)!\n          });\n        });\n      } else {\n        argument.elements.forEach((elementObject: estree.Literal) => {\n          element.observers.push(\n              {javascriptNode: elementObject, expression: elementObject.raw});\n        });\n      }\n    } else {\n      element.addProperty(propDesc);\n    }\n  }\n\n  enterCallExpression(node: estree.CallExpression, parent: estree.Node) {\n    // When dealing with a class, enterCallExpression is called after the\n    // parsing actually starts\n    if (this.classDetected) {\n      return estraverse.VisitorOption.Skip;\n    }\n\n    const callee = node.callee;\n    if (callee.type === 'Identifier') {\n      if (callee.name === 'Polymer') {\n        this.element = new ScannedPolymerElement({\n          description: esutil.getAttachedComment(parent),\n          events: esutil.getEventComments(parent),\n          sourceRange: this.document.sourceRangeForNode(node.arguments[0])\n        });\n        docs.annotate(this.element);\n        this.element.description = (this.element.description || '').trim();\n        this.propertyHandlers =\n            declarationPropertyHandlers(this.element, this.document);\n      }\n    }\n  }\n\n  leaveCallExpression(node: estree.CallExpression, _: estree.Node) {\n    const callee = node.callee;\n    const args = node.arguments;\n    if (callee.type === 'Identifier' && args.length === 1 &&\n        args[0].type === 'ObjectExpression') {\n      if (callee.name === 'Polymer') {\n        if (this.element) {\n          this.features.push(this.element);\n          this.element = null;\n          this.propertyHandlers = null;\n        }\n      }\n    }\n  }\n\n  enterObjectExpression(node: estree.ObjectExpression, _: estree.Node) {\n    // When dealing with a class, there is no single object that we can parse to\n    // retrieve all properties\n    if (this.classDetected) {\n      return estraverse.VisitorOption.Skip;\n    }\n\n    const element = this.element;\n    if (element) {\n      const getters: {[name: string]: ScannedPolymerProperty} = {};\n      const setters: {[name: string]: ScannedPolymerProperty} = {};\n      const definedProperties: {[name: string]: ScannedPolymerProperty} = {};\n      for (const prop of node.properties) {\n        const name = esutil.objectKeyToString(prop.key);\n        if (!name) {\n          element.warnings.push({\n            message:\n                `Can't determine name for property key from expression with type ${prop\n                    .key.type}.`,\n            code: 'cant-determine-property-name',\n            severity: Severity.WARNING,\n            sourceRange: this.document.sourceRangeForNode(prop.key)!\n          });\n          continue;\n        }\n\n        if (!this.propertyHandlers) {\n          continue;\n        }\n\n        if (name in this.propertyHandlers) {\n          this.propertyHandlers[name](prop.value);\n          continue;\n        }\n\n        try {\n          const scannedPolymerProperty = toScannedPolymerProperty(\n              prop, this.document.sourceRangeForNode(prop)!);\n          if (scannedPolymerProperty.getter) {\n            getters[scannedPolymerProperty.name] = scannedPolymerProperty;\n          } else if (scannedPolymerProperty.setter) {\n            setters[scannedPolymerProperty.name] = scannedPolymerProperty;\n          } else {\n            element.addProperty(toScannedPolymerProperty(\n                prop, this.document.sourceRangeForNode(prop)!));\n          }\n        } catch (e) {\n          if (e instanceof WarningCarryingException) {\n            element.warnings.push(e.warning);\n            continue;\n          }\n          throw e;\n        }\n      }\n      Object.keys(getters).forEach((getter) => {\n        const get = getters[getter];\n        definedProperties[get.name] = get;\n      });\n      Object.keys(setters).forEach((setter) => {\n        const set = setters[setter];\n        if (!(set.name in definedProperties)) {\n          definedProperties[set.name] = set;\n        } else {\n          definedProperties[set.name].setter = true;\n        }\n      });\n      Object.keys(definedProperties).forEach((p) => {\n        const prop = definedProperties[p];\n        element.addProperty(prop);\n      });\n      return estraverse.VisitorOption.Skip;\n    }\n  }\n}\n"]}