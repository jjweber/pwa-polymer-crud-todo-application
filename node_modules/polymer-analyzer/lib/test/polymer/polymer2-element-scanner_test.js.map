{"version":3,"sources":["test/polymer/polymer2-element-scanner_test.ts"],"names":[],"mappings":"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","file":"polymer2-element-scanner_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n\nimport {assert} from 'chai';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport {Visitor} from '../../javascript/estree-visitor';\nimport {JavaScriptDocument} from '../../javascript/javascript-document';\nimport {JavaScriptParser} from '../../javascript/javascript-parser';\nimport {ScannedElement, ScannedFeature} from '../../model/model';\nimport {Polymer2ElementScanner} from '../../polymer/polymer2-element-scanner';\n\nfunction compareTagNames(a: {tagName?: string}, b: {tagName?: string}): number {\n  const tagNameA = a && a.tagName;\n  const tagNameB = b && b.tagName;\n\n  if (tagNameA == null)\n    return (tagNameB == null) ? 0 : -1;\n  if (tagNameB == null)\n    return 1;\n  return tagNameA.localeCompare(tagNameB);\n};\n\nsuite('Polymer2ElementScanner', () => {\n\n  let document: JavaScriptDocument;\n  let elements: Map<string|undefined, ScannedElement>;\n  let elementsList: ScannedElement[];\n\n  suiteSetup(async() => {\n    let parser = new JavaScriptParser({sourceType: 'script'});\n    let file = fs.readFileSync(\n        path.resolve(__dirname, '../static/polymer2/test-element.js'), 'utf8');\n    document = parser.parse(file, '/static/polymer2/test-element.js');\n    let scanner = new Polymer2ElementScanner();\n    let visit = (visitor: Visitor) =>\n        Promise.resolve(document.visit([visitor]));\n\n    const features: ScannedFeature[] = await scanner.scan(document, visit);\n    elements = new Map();\n    elementsList =\n        <ScannedElement[]>features.filter((e) => e instanceof ScannedElement);\n    for (let element of elementsList) {\n      elements.set(element.tagName, element);\n    }\n  });\n\n  test('Finds elements', () => {\n    const sortedElements = elementsList.sort(compareTagNames);\n    const elementData =\n        sortedElements.map((e) => ({\n                             tagName: e.tagName,\n                             className: e.className,\n                             superClass: e.superClass,\n                             properties: e.properties.map((p) => ({\n                                                            name: p.name,\n                                                          })),\n                             attributes: e.attributes.map((a) => ({\n                                                            name: a.name,\n                                                          })),\n                           }));\n\n    assert.deepEqual(elementData, [\n      {\n        tagName: undefined,\n        className: 'BaseElement',\n        superClass: 'Polymer.Element',\n        properties: [{\n          name: 'foo',\n        }],\n        attributes: [{\n          name: 'foo',\n        }],\n      },\n      {\n        tagName: 'test-element',\n        className: 'TestElement',\n        superClass: 'Polymer.Element',\n        properties: [{\n          name: 'foo',\n        }],\n        attributes: [{\n          name: 'foo',\n        }],\n      }\n    ].sort(compareTagNames));\n  });\n\n});\n"]}